!zn
Segments_backgroundColour	!by 0

!zn
Segments_initStorage
	+MWordValueToAddress_A Segments_array , ZPSegments_primaryAllocatorAddrLo
	rts

!zn
; X = start line index
; Y = end line index (+ 1)
Segments_initListHeaders
	sty .smEndLine
	lda #0
.l1
	sta Segments_linesHi,x
	inx

.smEndLine = *+1
	cpx #0
	bne .l1

	rts


!zn
; Exit:
; ZPSegments_currentSegmentLo/Hi contains the newly allocated segment
Segments_allocate
	lda ZPSegments_primaryAllocatorAddrHi
	sta ZPSegments_currentSegmentHi
	lda ZPSegments_primaryAllocatorAddrLo
	sta ZPSegments_currentSegmentLo
	clc
	adc #kSegment_length
	sta ZPSegments_primaryAllocatorAddrLo
	bcc .ret
	inc ZPSegments_primaryAllocatorAddrHi
.ret
	rts


!zn
; Entry:
; A = colour
; X = start line index
; Y = end line index (+ 1)
Segments_processLines
	sta ZPSegments_segmentColour
	sty .smEndLine
.l1
	; Reject bad line lengths
	lda Poly_linesLeft,x
	cmp Poly_linesRight,x
	bcs .endLine

	lda Segments_linesHi,x
	bne .haveSegment

	jsr Segments_allocate
	+Segments_clearNextSegment
	+Segments_setLineHead

	+Segments_copyPolyStartEndColour

.endLine
	inx
.smEndLine = *+1
	cpx #0
	bne .l1
	rts

.haveSegment
	; A line with at least one segment allocated in it
	sta ZPSegments_currentSegmentHi
	lda Segments_linesLo,x
	sta ZPSegments_currentSegmentLo

	lda Poly_linesLeft,x
	sta ZPSegments_segmentLeft
	lda Poly_linesRight,x
	sta ZPSegments_segmentRight

	+Segments_forgetLast

	jmp .someLength

.cl1
	; At this point ZPSegments_lastSegmentLo/Hi is pointing to a valid previous span
	; Make sure we have some length to process
	lda ZPSegments_segmentLeft
	cmp ZPSegments_segmentRight
	bcs .endLine

	; Add whatever remains to the end of the link list
	lda ZPSegments_currentSegmentHi
	bne .someLength

	; Perform same colour check for extension of the last segment
	ldy #kSegment_offset_colour
	lda (ZPSegments_lastSegmentLo),y
	cmp ZPSegments_segmentColour
	bne .addNew

	; Is the right of the last segment equal to the current new left?
	ldy #kSegment_offset_right
	lda ZPSegments_segmentLeft
	cmp (ZPSegments_lastSegmentLo),y
	bne .addNew

	; We can extend the right or the last segment then
	lda ZPSegments_segmentRight
	sta (ZPSegments_lastSegmentLo),y
	jmp .endLine

.addNew
	jsr Segments_allocate
	+Segments_addToLastSegmentNoNext
	+Segments_copySegmentStartEndColour
	jmp .endLine

.someLength
	ldy #kSegment_offset_left
	lda ZPSegments_segmentLeft
	cmp (ZPSegments_currentSegmentLo),y
	bcc .newLeftLTSegmentLeft
	jmp .newLeftGESegmentLeft
.newLeftLTSegmentLeft
	; New left < current left

	; Figure out where the end point finishes
	lda ZPSegments_segmentRight
	cmp (ZPSegments_currentSegmentLo),y
	bcs .newRightGEExistingLeft

	; New left and right are < current left
	; Need to insert a new span before the current one
	+Segments_currentToTemp
	jsr Segments_allocate
	+Segments_insertCurrentBeforeTemp
	+Segments_copySegmentStartEndColour
	jmp .endLine

.newRightGEExistingLeft
	; Something is potentially dangling off the left of the existing segment
	ldy #kSegment_offset_colour
	lda (ZPSegments_currentSegmentLo),y
	cmp ZPSegments_segmentColour
	beq .sameColourExtendLeft

	; Different colour to the left but the segment needs to be clipped
	+Segments_currentToTemp
	jsr Segments_allocate
	+Segments_insertCurrentBeforeTemp

	ldy #kSegment_offset_left
	lda ZPSegments_segmentLeft
	sta (ZPSegments_currentSegmentLo),y
	lda (ZPSegments_tempSegmentLo),y
	iny
	sta (ZPSegments_currentSegmentLo),y

	lda (ZPSegments_tempSegmentLo),y
	sta ZPSegments_segmentLeft	; Advance the left edge

	iny
	lda ZPSegments_segmentColour
	sta (ZPSegments_currentSegmentLo),y

	lda ZPSegments_tempSegmentLo
	sta ZPSegments_lastSegmentLo
	sta ZPSegments_currentSegmentLo
	lda ZPSegments_tempSegmentHi
	sta ZPSegments_lastSegmentHi
	sta ZPSegments_currentSegmentHi

	jmp .justGetNext

.sameColourExtendLeft
	ldy #kSegment_offset_left
	lda ZPSegments_segmentLeft
	sta (ZPSegments_currentSegmentLo),y

	ldy #kSegment_offset_right
	jmp .advanceNextSegmentClip


.newLeftGESegmentLeft
	ldy #kSegment_offset_right
	lda ZPSegments_segmentLeft
	cmp (ZPSegments_currentSegmentLo),y
	bcs .advanceNextSegmentNoClip


	lda ZPSegments_segmentRight
	cmp (ZPSegments_currentSegmentLo),y
	beq .newRightLESegmentRight
	bcc .newRightLESegmentRight

.advanceNextSegmentClip
	; Get the right position and clip the new segment to it
	lda (ZPSegments_currentSegmentLo),y
	sta ZPSegments_segmentLeft

.advanceNextSegmentNoClip
	lda ZPSegments_lastSegmentHi
	beq .doNotUsePrevious

	; Merge previous segment and current check
	; Same colour?
	ldy #kSegment_offset_colour
	lda (ZPSegments_lastSegmentLo),y
	cmp (ZPSegments_currentSegmentLo),y
	bne .doNotUsePrevious

	; Last right = current left?
	ldy #kSegment_offset_right
	lda (ZPSegments_lastSegmentLo),y
	ldy #kSegment_offset_left
	cmp (ZPSegments_currentSegmentLo),y
	bne .doNotUsePrevious

	; Merge current into last
	ldy #kSegment_offset_right
	lda (ZPSegments_currentSegmentLo),y
	sta (ZPSegments_lastSegmentLo),y

	ldy #kSegment_offset_nextLo
	lda (ZPSegments_currentSegmentLo),y
	sta (ZPSegments_lastSegmentLo),y
	iny
	lda (ZPSegments_currentSegmentLo),y
	sta (ZPSegments_lastSegmentLo),y
	jmp .justGetNext

.doNotUsePrevious
	+Segments_setLast
.justGetNext
	+Segments_getNextSegment

	; Then loop around
	jmp .cl1

.newRightLESegmentRight
	; Nothing new to add since the new segment is completely obscured by the existing segment
	jmp .endLine
