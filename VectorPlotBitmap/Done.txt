Done

* Produce several tests of code for different lengths and starting pixel offsets
	0-3 pixel input and 0-3 pixel output based on the input and span length then jumps to the relevant 0-3 pixel aligned routine for next span
	This might mean that X is preserved for the current span
		Which means the span buffer could be byte pairs of:
			0 - Length
			1 - Colour
		And length 0 means end of the span buffer, no colour



* Produce all the various lengths speed code with inout 0-3 pixel alignment.
	Add four lookup tables, based on 0-3 pixel alignment, containing all the lengths



* The first few 1 pixel wide scans are not quite displaying correctly. Probably some input offset plus output state problem.



* Continue SpanConfig work to pick good values to maximally fill the banks
	* Then create a span length to cart bank lookup table and use that to then access the jump table SpanTable
	* Then bundle this into a cartridge (switchable between EF in 8K mode and Gmod2)
* Add speed code to cart
	* Long and short spans across the boundaries for the banks tested


* Segments linklist probably not quicker, abandon for now. Segment*.a/feature
		Is it quicker to keep this arrangement when inserting new spans? Or should a linklist with len/colour pairs be used instead?
		Then each scanline span can be long or short with the kSpanCalc_maxSegments limitation.
		A linklist would need to be fast to initialise to an unallocated list:
			* A contiguous chunk of memory for the free pairs plus unitialised next pointer
			* New blocks are sequentially taken from this list and initialised, the next pointer is then initalised for the span
			* A large enough potential span list might not need a free block reuse mechanism, depending on complexity
			* So this is a nice to have:
			* Free blocks are added to a singly linked list, its next pointer updated with the head, the new head is the just freed block
			* When the contiguous chunk of memory is exhausted then the routine starts taking the first free block from the free list and advances the free list head from the next pointer


* Vector span calc colour can keep index.
	Done - Zero is always background. (kSpanCalc_backgroundColour)
	The only when plotting convert index into bitmap pattern.
	i.e. Move the SpanCalc_rotatedColour lookup in SpanCalc_scanPoly to MacroScanCalc_GetSegment or MacroGetSpan
	However in MacroScanCalc_GetSegment we are register limited.
	Maybe MacroGetSpan has enough space after it does lda .scanColours,x ? But it does not have easy access to the current line for the dithering test
		Unless a line palette lo/hi in ZP is setup? This would then allow the below to be done:
		* Don't need to double the colour index number.
			Use separate tables for alternate lines?
		Done - Bitmap_lineToPaletteLo , the high address is always dsetup into ZPBitmap_PaletteLo/Hi



* Tidy the bitmap plotting code around: SpanCalc_screenNumSegments
	Separate file etc
	Then create some expected plot memory comparison tests.
	kSpanPlot_maxLen will need to be reduced since BDD6502 does not support cartridge yet
		Added SpanTable_IsInCart which can choose between cartridge and RAM mode
		Created BitmapPlot.feature



* SpanCalcFilled2.feature need more cases where the inserting segment is shorter than the first segment
	.differentColour2_0
	; Insert segment




* If the polys are sorted from front to back then using a c-buffer, which is simpler than an s-buffer as it effectively stores clipping information. might be better
	* Since the polys are going to be sorted anyway, it doesn't matter which order they are sorted
	* If the cbuffer is used then the entire span list can be reset for every frame
	* Then if there is a completely empty span it is easier to detect
	* This also means the routine that builds the plottable span for the screen can maintain the dirty line draw test
	* It also means there is a potential to optimised the dirty line draw/clear based on a segment of the scan. Therefore saving horizontal clear time.
	* An early out is when the span is completely full, it can be flagged as such for subsequent poly insertion tests
		* An early out count of pixels left in the span can be used for this
	* Colours are stored as before of course
	* Clip spans are inserted left to right as before, however the background is empty, so the span is stored with sparse information instead
		* Sparse storage makes it much easier to clear the c-buffer list
	* It also means that the span update code is simplified to only inserting newer segments (that might be shorter) into empty gaps, never removing old segments
	* It also means the span allocation can be a simple linear allocate as spans are never returned to the free list during insertion since they won't be obscured. (Spans can be lengthened if they are the same colour.)




* Perhaps a link list of Segments with start/end/colour information is the best way to do this after all...
	Input is the poly start/end
	Then looping from the first segment, basically clip/split/replace/insert the poly input and update the segments until there is no more poly length left
	This means the code can then do a simpler adjacent colour tidy pass to reduce the linklist complexity as and when it's needed
	* It also makes a potential Z buffer check much easier later on :D
	* ; MPi: TODO: Starting segment needs a length check

** features/SegmentClip.feature in progress
	Need adding segment to the end of existing due to the end matching the end
	Need inserting segment in the middle of existing
	Need replacing due to the segment being longer
	Need span duplicate colour check and merge


* Added features\SegmentMultiLines.feature



* For Segments similar functionality for SpanCalc_dirtyClear and SpanCalc_expireCleared would be needed
	* Also !macro ScanCalc_GetSegment would need to be made link list aware
	* Or perhaps better would be a conversion from the accumulated active Segments_linesLo/Hi into SpanCalc_screenNumSegments and SpanCalc_screenSegmentsLen/SpanCalc_screenSegmentsColour
		* Split out the SpanCalc_scanPoly, or disable the code
	* Making ScanCalc_GetSegment link-list aware is best, it can also perform the previous frames check for a changed line and skip the draw if there is no change
		* A suitable hashing algorithm would be needed while parsing the link-list of spans into 
		* Create a test for BitmapPlot_drawSpans, specifically the execution up until .doScanDraw where .scanLengths , .scanColours are tested for known linklist inputs
			* Or unit test the conversion code/macro in a slightly more controlled scope
		* BitmapPlot.feature will need to be updated to remove SpanCalc_scanPoly and change to Segments_processLines
			* SpanCalc_screenNumSegments, SpanCalc_screenSegmentsLen, SpanCalc_screenSegmentsColour will all need to be removed since this methodology is deprecated



* Need right side span cases, they can mirror the left case
* Also need middle span cases



* When SpanPlot_MaskEnds	= 1 is disabled the demo corrupts the screen and crashes?
	Got "Code too large" error, so SpanConfigSize_0	= 98 now



Removed SpanCalc_scanPoly related tests



* For Scenario: Triangle scan, flat bottom, right angle
	* This is unexpected given the x coord in $80 for the input: Then property "test.BDD6502.lastHexDump" must contain string ignoring whitespace "88 88 88 88 88 88 88 88  88 88 88 88 88 88 88 88"
	Note ;????
		* These adjustments could possible do with adding on half the gradient instead?




* When adding the second triangle with Segments_processLines there seems to be a black segment inserted, with the correct length, instead of the correct colour?
	Need a feature file replication test case and fix
	features\BitmapPlot.feature
	Scenario: Poly scans, edge trace and plot test
	Line 12 (starting from 0)
	Should contains spans from colour 1 and 2 but doesn't
	Hmm doTrace1 gives single span in head:
		4763: ff 00 18 25 01
	DoTrace2 gives updated head and:
		47cc: d1 47 13  18 02 ff 00 25 28 02
	SegmentClip.feature
	Scenario Outline: Segment extension test, existing segments, new segment has different colour and it clipped, new segments
	It reproduces!



* Add 3D calculation to create spans
	Poly_linesLeft and Poly_linesRight
