;IRQDisk test code

; Run BuildIt.bat
; Run the test.d64 as the first file is the assembled TestIRQDisk.a
; Observe the black screen and white border
; Press fire - Note the drive LED pulses and the black raster bar in the middle of the screen border.
; Press fire - Note the file "SCREEN1" loads
; After loading, note red border white raster bar
; Press fire - Note the file "SCREEN2" loads
; After loading, note cyan border red raster bar
; Press fire - Screen goes white, file is saved to "TESTSAVE"
; After saving, note purple border and cyan raster
; Press fire - Note "formula too complex" error, indicating a RTS back to BASIC(ish)


!source "../stdlib/stdlib.a"
!to "TestIRQDisk.prg", cbm
!sal
!sl "TestIRQDisk.map"
!svl "TestIRQDisk.lbl"
!pdb "TestIRQDisk.pdb"
!cpu 6510
!ct pet

!source "IRQDiskVars.a"
IRQDisk_MachineTarget = IRQDisk_MachineTypeC64
IRQDisk_Retries = 5
IRQDisk_LEDFlash = 15
;IRQDisk_UseATN = 1

; Enable this to cause timing debug code to run instead. It helps show timings for 2 bit transfer.
;IRQDisk_DebugTimings = 1

; Enable this to use the JAM opcode and remove joystick fire waits. Stop the save from happening. Useful for timing the loading speed.
; Remember to use this Vice command line option to stop random delays on boot: -drive8wobble 0 +autostart-delay-random
;IRQDisk_DebugElapsedTime = 1
; Current:
; 12972074

; This enables a test of data transfer on the rising edge of the clock line. It can be clocked twice as fast as the normal transfer when the screen and IRQs are disabled.
; Rising egde of the clock means the timing on the C64 side is not so tight and can cope with some wobble.
;IRQDisk_TestClockedTransfer = 1


!if 0 {
!source "../stdlib/BASICEntry900.a"

*=BASICEntry
	lda #ProcessorPortAllRAMWithIO
	jsr InitialiseMachine
.l1
	inc VIC2BorderColour
	jmp .l1


!source "../stdlib/Initialise.a"
}

* = $c000
	lda #ProcessorPortDefault
	jsr InitialiseMachine
	+InitKERNALIO_AXY
	+SetDefaultScreen_A
	lda #1
	sta VIC2BorderColour
!ifndef IRQDisk_DebugElapsedTime {
	+WaitForFire_A
}

	lda ZPCurrentFileDeviceNumber
	jsr IRQDisk_Init

!ifdef IRQDisk_TestClockedTransfer {
	; Code to test clocked transfer, perhaps useful when IRQ and screen are off
	lda #0
	sta VIC2ScreenControlV
	sei
	+MACROWaitForRaster 0
	jsr IRQDisk_SendClockedRecv
	ldy #0
.ll1
	jsr IRQDisk_ClockedRecv
	; Validate the values and jam when they do not match
	sta .smt1
	tya
.smt1=*+1
	cmp #0
	bne .dojam
	sta SCREENRAM,y
	iny
	jmp .ll1
.dojam jam
}

;	lda #0
;	sta VIC2ScreenControlV

!ifdef IRQDisk_DebugTimings {
.l1
	lda .serialIn
	lsr
	lsr
	lsr
	lsr
	sta VIC2BorderColour
	jmp .l1
}

	lda #8
	jsr IRQDisk_SetPulseSpeed

	; Debugging drive bytes, useful for testing patterns to/from the CIA/VIA
!if 0 {
	jsr .waitAWhile
	jsr .waitAWhile
	jsr .waitAWhile
	jsr .waitAWhile
	jsr .waitAWhile
	sei	; Stop any IRQs from messing with our test

.testL1
	; C0D0
	lda #55
	sta CIA2PortASerialBusVICBank
	jsr .waitAWhile
	lda CIA2PortASerialBusVICBank

	; C0D1
	lda #23
	sta CIA2PortASerialBusVICBank
	jsr .waitAWhile
	lda CIA2PortASerialBusVICBank

	; C1D0
	lda #39
	sta CIA2PortASerialBusVICBank
	jsr .waitAWhile
	lda CIA2PortASerialBusVICBank

	; C1D1
	lda #7
	sta CIA2PortASerialBusVICBank
	jsr .waitAWhile
	lda CIA2PortASerialBusVICBank

	jmp .testL1

.waitAWhile
	ldx #0
.waw1
	dex
	bne .waw1
	rts
}

	jsr InitIRQ

!ifndef IRQDisk_DebugElapsedTime {
	+WaitForFire_A
}

	lda #.nameTestEnd-.nameTest
	ldx #<.nameTest
	ldy #>.nameTest
	jsr IRQDisk_Load

	inc VIC2BorderColour

!ifndef IRQDisk_DebugElapsedTime {
	+WaitForFire_A
}

	lda #.nameTest2End-.nameTest2
	ldx #<.nameTest2
	ldy #>.nameTest2
	jsr IRQDisk_Load

	inc VIC2BorderColour

!ifndef IRQDisk_DebugElapsedTime {
	+WaitForFire_A
}

!ifdef IRQDisk_DebugElapsedTime {
	jam
}

!if 1 {
	; Now try saving the just loaded data to another file of the same length.
	inc VIC2ScreenColour
	lda #.nameTestSaveEnd-.nameTestSave
	ldx #<.nameTestSave
	ldy #>.nameTestSave
	jsr IRQDisk_WriteSetName
	; The drive is in the process of finding the directory entry here.
	ldx #<BASICSTART
	ldy #>BASICSTART
	jsr IRQDisk_WriteData
}

	inc VIC2BorderColour

	+WaitForFire_A
	
	rts

	; Note, the ct raw is used here
.nameTest !raw "SCREEN1"
.nameTestEnd = *
.nameTest2 !raw "SCREEN2"
.nameTest2End = *

.nameTestSave !raw "TESTSAVE"
.nameTestSaveEnd = *

TestIRQ
	pha
	txa
	pha
	dec VIC2BorderColour
	; Waste some time
	ldx #64
.il1
	dex
	bne .il1
	lda VIC2Raster
.il2
	cmp VIC2Raster
	beq .il2
	inc VIC2BorderColour
	+MACROAckRasterIRQ_A
	pla
	tax
	pla
	jmp DefaultIRQServiceRoutine

InitIRQ
	sei
	; Stop the timers generating IRQs
	lda #$7f
	sta CIA1InterruptControl
	sta CIA2InterruptControl
	; Grab the IRQ
	lda #<TestIRQ
	sta IRQServiceRoutineLo
	lda #>TestIRQ
	sta IRQServiceRoutineHi
	; Raster position
	lda #152
	sta VIC2Raster
	lda VIC2ScreenControlV
	and #$7f
	sta VIC2ScreenControlV
	; VIC IRQ control
	lda #1
	sta VIC2InteruptControl
	+MACROAckRasterIRQ_A
	cli
	rts

; This block of code includes the IRQ disk libs, note the !zn is here instead of in the libs.
;!zn {
; Include the private code for each machine type
!if IRQDisk_MachineTarget & IRQDisk_MachineTypeVIC20 {
!source "IRQDiskVIC20.a"
}
!if IRQDisk_MachineTarget & IRQDisk_MachineTypeC16 {
!source "IRQDiskC16.a"
}
!if IRQDisk_MachineTarget & IRQDisk_MachineTypeC64 {
!source "IRQDiskC64.a"
}
!if IRQDisk_MachineTarget & IRQDisk_MachineTypeC128 {
!source "IRQDiskC128.a"
}
!source "IRQDisk.a"
!source "stdlib1541.a"
!source "IRQDiskDriveCode.a"
;}

!source "../stdlib/Initialise.a"
