!if 0 {

// Return minimum distance between line segment vw and point p
float minimum_distance(vec2 v, vec2 w, vec2 p)
{
	const float l2 = length_squared(v, w);	// i.e. |w-v|^2 -  avoid a sqrt
	if (l2 == 0.0)
	{
		return distance(p, v);	// v == w case
	}

	// Consider the line extending the segment, parameterized as v + t (w - v).
	// We find projection of point p onto the line. 
	// It falls where t = [(p-v) . (w-v)] / |w-v|^2
	const float t = dot(p - v, w - v) / l2;
	if (t < 0.0)
	{
		return distance(p, v);       // Beyond the 'v' end of the segment
	}
	else if (t > 1.0)
	{
		return distance(p, w);  // Beyond the 'w' end of the segment
	}

	const vec2 projection = v + t * (w - v);  // Projection falls on the segment
	return distance(p, projection);
}

bool inTriangle(vec2d pt) {
    float AB = (pt.y-p1.y)*(p2.x-p1.x) - (pt.x-p1.x)*(p2.y-p1.y);
    float CA = (pt.y-p3.y)*(p1.x-p3.x) - (pt.x-p3.x)*(p1.y-p3.y);
    float BC = (pt.y-p2.y)*(p3.x-p2.x) - (pt.x-p2.x)*(p3.y-p2.y);

    if (AB*BC>0.f && BC*CA>0.f)
        return true;
    return false;    
}

}
