!zn

!source "SpritePosToScreenPosMem.a"
!source "SpritePosToScreenPosMem2.a"

ZP_SpriteYPosToScreenCharPosLolo	= tempWork6
ZP_SpriteYPosToScreenCharPosLohi	= tempWork7
ZP_SpriteYPosToScreenCharPosHilo	= tempWork8
ZP_SpriteYPosToScreenCharPosHihi	= tempWork9
ZP_SpriteXPosToScreenCharPoslo		= tempWork10
ZP_SpriteXPosToScreenCharPoshi		= tempWork11

EnemyActivationMapLo
!fill 256
EnemyActivationMapHi
!fill 256

AnimationInit2
	jsr AnimationUnpackMapPlacements
	rts

Animation_FramesLo
	!by <AnimationFrames_MainCharLegsStandLeft
	!by <AnimationFrames_MainCharTorsoStandLeft
	!fill Multiplex_items-2 , 0

Animation_FramesHi
	!by >AnimationFrames_MainCharLegsRight
	!by >AnimationFrames_MainCharTorsoRight
	!fill Multiplex_items-2 , 0


Animation_TickLo
	!fill Multiplex_items , 0
Animation_TickHi
	!fill Multiplex_items , 0



Animation_Index
	!fill Multiplex_items , 0

; Can be used for anything, but mostly health
Animation_GeneralStorage0
	!fill Multiplex_items , 0


Animation_FindFreeSlot
	ldy #Multiplex_items-1
.ff1
	lda Animation_FramesHi,y
	beq .foundFree
	dey
	; Never consider the two player animation slots
	cpy #1
	bne .ff1
	sec
	rts
.foundFree
	clc
	rts


; For Animation_UpdateTick
.discard
	lda #0
	sta Animation_FramesHi,x
	jmp .nextSlot

PlayerXPosShifted !by 0

Animation_UpdateTick

	; Calculate the shufted player pos once
	lda AnimationXPosHi
	ror
	lda AnimationXPosLo
	ror
	sta PlayerXPosShifted


	; Loop through animation frames
	ldx #Multiplex_items-1
.an1
	lda Animation_FramesHi,x
	beq .nextSlot
	sta tempWork1

	; Never, ever, discard the player animations in the first two slots
	cpx #2
	bcc .noDiscard

	lda AnimationYPos,x
!set .safeAreaY = <(VIC2SpriteYBorderTop24-32-32)
;!set .safeAreaY = 240
	cmp #.safeAreaY
	bcs .testXPos
!set Multiplex_DiscardSpritesYPosSafe = Multiplex_DiscardSpritesYPos+20
!if Multiplex_DiscardSpritesYPosSafe > VIC2SpriteYBorderBottom {
	!set Multiplex_DiscardSpritesYPosSafe = VIC2SpriteYBorderBottom
}
!if Multiplex_DiscardSpritesYPosSafe >= .safeAreaY {
	!error "Safe areas overlap in the Y"
}
	cmp #Multiplex_DiscardSpritesYPosSafe
	bcs .discard

.testXPos
	lda AnimationXPosHi,x
	beq .noDiscard
	lda AnimationXPosLo,x
	cmp #-32-16	; Annoying, but sprites spawned almost totally off screen (with 32x32 pixel blocks) might be at this coordinate range
	bcs .noDiscard
	cmp #<(VIC2SpriteXBorderRight+32+16)
	bcs .discard

.noDiscard
	lda Animation_FramesLo,x
	sta tempWork0
	ldy Animation_Index,x
	lda (tempWork0),y
	bne .gotFrame
	; 0 = end of animation sequence
	iny
	lda (tempWork0),y
	cmp #kEndAnim_Delete
	beq .discard
	; Otherwise it's kEndAnim_Loop
	lda #0
	tay
	sta Animation_Index,x
	lda (tempWork0),y
.gotFrame
	sta AnimationSpriteFrame,x
	iny
	tya
	sta Animation_Index,x

	lda Animation_TickHi,x
	beq .noTickFunc
	sta .smTick+2

	lda Animation_TickLo,x
	sta .smTick+1

.smTick	jsr $1234

.noTickFunc

.nextSlot
	dex
	bpl .an1

	; MPi: TODO: Process movement for everything else

	rts



!zn
; Morphs to a particular animation if it is different to what is currently there. This resets the frame index if the morph happens.
; Entry:
; A/X = lo/hi animation header
; Y = Animation index
Animation_MorphToIfNeeded
	pha
	cmp Animation_FramesLo,y
	bne .l1

	txa
	cmp Animation_FramesHi,y
	bne .l2

	pla
	rts

.l1
	txa
.l2
	sta Animation_FramesHi,y
	pla
	sta Animation_FramesLo,y
.commonInit
	lda #0
	sta Animation_Index,y
	rts

; Entry:
; A/X = lo/hi animation header
; Y = Animation index
Animation_ForceSet
	sta Animation_FramesLo,y
	txa
	sta Animation_FramesHi,y
	jmp .commonInit


!zn
UpdateMultiplexorToAnimation
	; Setup the player position
	lda #136
	sta AnimationXPosLo
	lda #144
	sta AnimationYPos
	lda #0
	sta AnimationXPosHi

	lda #$ff
	sta VIC2SpriteMulticolour
	lda #VIC2Colour_DarkGrey
	sta VIC2ExtraSpriteColour1
	lda #VIC2Colour_Yellow
	sta VIC2ExtraSpriteColour2

	lda #VIC2Colour_LightRed
	sta AnimationSpriteColour
	sta AnimationSpriteColour+1

	; Set map scroll position
	+MByteValueToAddress_A 71 , scrollMapHX
	+MByteValueToAddress_A 0 , scrollMapLX
	+MByteValueToAddress_A 24 , scrollMapHY
;	+MByteValueToAddress_A 0 , scrollMapHY
	+MByteValueToAddress_A 0 , scrollMapLY
	+MByteValueToAddress_A 4 , frameScrollX
	+MByteValueToAddress_A 4 , frameScrollY
	jsr ScrollerUpdateRealCoordinates

	rts
