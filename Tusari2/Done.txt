* Using Scroller in multi-direction mode as an engine, assess the feasibility of creating Tusari 2 which would be a hack-n-slash with daggers and magic.


* Need art assets, reverse existing Tusari code or just rip from active Vice snapshots?
	Might need to write a one-off Tusari format to CharPad conversion tool to grab the maps. They will have lots of empty areas because the flip screen levels were sparse.
	Level editor source code, converted: C:\CCS64\MyOldE114Software\TusariDevTusari\leveled.txt
	C:\CCS64\MyOldE114Software\TusariDevTusari\CHRS.PRG
	For level editor:
		Open: C:\CCS64\MyOldE114Software\TusariDevTusari.d64
		L (level editor)
		It will fail to load "editor" on line 141
		Attach: C:\CCS64\MyOldE114Software\TusariDevInOutSide1.d64
		goto 141
		Enter screen: 1
	Level editor controls:
		Screen left		Shift+z
		Screen right	Shift+x
		Screen up		]
		Screen down		Shift+/
		Cursor left		z
		Cursor right	x
		Cursor up		;
		Cursor down		/
		Prev block		-
		Next block		Shift+=
	
	Block data format:
		C:\CCS64\MyOldE114Software\TusariDevTusari\BLKS.PRG
		C:\CCS64\MyOldE114Software\TusariDevTusari\BLKS2.PRG
		For 64 (256/4=64) blocks
		$0000	0123
		$0100	4567
		$0200	89ab
		$0300	cdef
		Then second file another 64 blocks

	Map: C:\CCS64\MyOldE114Software\TusariDevTusari\MAP.PRG
		10*5 bytes of:
			Tile colour
			Tile index
		bytes for up/down/left/right exit screen index
	Starting screen is index 1
	
	Background colours: 0
	MC colours: 11 and 9

	C64\ExternalTools\CharPad Free Edition 2.7.2
		Allows tile colours to be separately imported
		Note: Using raw binary files from the conversion process means the number of tiles is limited to 256 from the map bytes
			An option exists to use the CharPad file format: file:///C:/Work/C64/ExternalTools/CharPad%20Free%20Edition%202.7.2/Help/File%20Format%20-%20CTM%20(V7).htm
	
	While decoding the original map data, screen 0 can be skipped, the screenVisited array can avoid parsing an already parsed screen
		Make the decode screen to map code recursive, parsing each non-zero value for the screen exits until return

	* Problem is that the exits for screens are not entirely consistent with the visible or reachable exits, sometimes the same screen number is used for multiple exits.
	
	Level1.ctm - Contains the FlattenMap exported data, plus some simple copy/paste fixup to connect the correct areas of the map, fixing the inconsistent exit issues
		Materials (1 and f) are used to allow characters to be sorted and maintain the "solid" chars in their correct order towards the upper end of the used characters memory.
	Level1-2.ctm - Contains the above, but with per-character colour enabled and numerous block and map tweaks added.

	Using the above CTM file, plus Tusari2\ScrollerData.a and "BuildIt.bat ScrollEntry_MultiDirection.a"
		Produces a working output: Tusari2\Scroller.crt



* BuildIt.bat used to create Scroller.crt for this Tusari2 build



* Update animation engine to not use frame speed, but instead have duplicated updates per frame, reduces code complexity and uses more memory



* Create SpritePad file instead of pulling in original Tusari data files
	Interesting historical point, sprite 183 in the original game had my old phone number from around 1989/1990.
		One day about 2000 someone called the number to tell me they had been searching the sprites of the game and found the number. :)
		This version does not include the number as it was discontinued and is probably owned by someone else at this point.



* Add player run left animations
	AnimationFrames_MainCharTorsoLeft
	AnimationFrames_MainCharLegsLeft




* Add player stand animations



* Add player weapon characters, dagger left and right chars
	Level chars to be the full 256 with lots of blank space



* Add better daggers



* ; TODO: Calculate larger push scroll values if the player is close to the screen edges



* Animation edge of screen removal code
	Animation_UpdateTick updated to include .discard and also define Animation_ActiveNonZeroEnabled and Animation_ActiveNonZero



* Fixed edge of map range checking and scrolling. Also added extra char lines for the screen character checking code.




* Efficient enemy storage format
	When scrolling, the edge(s) coming into view need to be checked
	Enemies placed at correct position on the screen edge, just inside the discard range
		Discard range needs to be bigger to accomodate offscreen spawned enemies
	Once spawned, do not respawn
	Once discard, option to allow respawn

	Screen edges maintain their own latest map block coordinate tree iterator, scan next/prev for next one if different
		Same for the Y coordinate tree when X coordinate changes
	* TODO: Double check which scroll uses less time and prefer X or Y scanning update order

	* Map block X coordinate tree
		Coordinate value
		lo/hi prev ptr
		lo/hi next ptr
		lo/hi to Y coordinate tree
	* Y coordinate tree
		Coordinate value
		lo/hi prev ptr
		lo/hi next ptr
			Num animations in this block
				0 = no spawned, 1 = spawned (so skip)
				Animation type
				X offset pixels from top left of block
				Y offset pixels from top left of block

	* Do this instead
	* Less efficient, but quick to lookup
		Byte per map tile, 0 = no enemy, 1+ = index into enemy activation array
		Enemy activation object: (can be used more than once, useful for duplicates)
			0	Animation type index
			1	X offset pixels from top left of block
			2	Y offset pixels from top left of block
	* Index can be cleared in RAM for spawned enemy
	* Activation objects can be stored in cartridge memory

	* These can also be stored in cartridge memory
	* Animation types
		lo/hi init routine
		lo/hi tick routine

	* Done !DoAnimationActivationObject, !DoAnimationType and  AnimationEnemyMapPlacements parsing into EnemyActivationMapStart
	* Done Widen the discard area and detect screen edge changes and spawn type from activation objects
		Added Scroller_CallbackBeforeCharScreenScroll
		Done: .doLeftEdge Sprite X position seems correct, Y position seems to be wrong for some block scrolls?
			Added scrollRealMap* which provides non-lagged accurate posiitions taking into account the offscreen phase
		All screen edges seem to work OK



* ActivationObject needs to stop processing map coordinates beyond the bottom or right of the map data



* Add ability for very aggressive animation to multiplexor update, strictly for minimum visible screen edges otherwise set the multiplexor sprite Y to be 255
	This then allows for the animation positions to contain sprites off screen without hurting multiplexor performance
		Added Scroller_DiscardForMultiplexorRight



* Uh oh, when "!initmem $02	; JAM opcode" is used then there is no crash but when "!initmem %10101010" is used there is a crash when running to the far right of the level and jumping around a bit.
	Out of range enemy map data read




* Bat move slowly towards player tick



* Added CharEffects_HiddenIndexLookupEnabled to allow fast bullet lookups
* For enemy to bullet chars collision: Going to need a quick way to reference from screen position back to CharEffectsChar etc.
	Fastest, least memory efficient way, is to store the index at the position in a hidden screen. Clearing the values to -1 to indicate no char bullet at that position
	Then the enemy can read the hidden screen char, check for a valid index (not -ve), and set the CharEffectsTime to -1 to kill the bullet



* Consider where to do enemy hit detection. In the tick, or have "animation health" that will optimise the hit detection logic?
	If in the tick then the decision on what process and when can be tweaked for different enemies
	It also allows better variety around enemy death processing and score or dropped item awards
	* In the tick, example code "; Decrease bat health"
