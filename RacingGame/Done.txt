* Created cart based minimal build project, using ProcessorPortDefault, with the multiplexor enabled


* For: *.S.* *.BA.* in C:\CCS64\MyOldE114Software\ProjectX
Use this to convert: C:\work\Tok64\Debug\Tok64.exe /6510+ /stomp /totxt <filename>

* Extract meaningful graphical data for:
	Sprites
	Charsets
	Characters
	Road side objects

* Extract meaningful road data and data generation routines


* Understand how the plot routines work, tidy up from original source or engineer new versions.



* TrackDraw.a tidy code
	* Make data offsets position independant
	* Make multi-screen bank capable
	* Update multiplexor bank config
	* Update the sprite cull to be just above the score panel
	* Add a bottom of screen IRQ above the score panel for the screen split
	* Add NMI for horizon, use the bottom of screen IRQ above the score panel for the timing




* TODO: While rendering from back to front, there is an track object optimisation (for jsr objsprint), where the ymax of the draw can be adjusted to be higher.
When a far road row is being drawn below the near horizon the ymax can be the near horizon (i.e. hill crest) position.
	From the column 38 index, i.e. at the start of the track draw, before the road row draw loop, set ymax to be the Y pos from the hill crest horizon index
	The ymax reset with the hill crest index can be the first thing in the new road row plot loop
		i.e. Then after the near horizon position is drawn the ymax is is set to be the screen height again.
	* TODO: Below mentioned ymax optimisation available here, set ymax to max height
	* Use Debug_ForceTrackStateRender=X to render a certain track type



* Clear the current line and draw the road span all in one go



* Done - ; MPi: TODO: Needs to forward scan for the next row and calculate fixup values and store them back for the right edge render
	Done - Last column in the screen at $4800 should be 'S' not 'R' not fix the last line perspective
	* Done - Need to convert these data files into included data statements in source files
* Separated TrackDraw_SmoothEdgeFixup from TrackDraw_SmoothEdgeLeft
	* .leftToRight	; Done
	* .sameX			; Done

* Track side smoothing (TrackDraw.a:smoothedge) needs vast improvement
	* smoothedge currently seems to calculate a gradient based on the current rendered row index in yfl and to the next different row Y pos
	* Perhaps an improvement would be to take the row index in yfl and look ahead 4 rows and calculate a gradient based on that
	* Since the background is char 0 then first render the road and the objects, minus the smooth edge
	* For each screen row store the left an right calculated rendered values and the row index in the first pass
	* Then as a second pass after the road plus objects have been drawn use the first pass data to draw the smooth edges
		* This will need a char 0 check to avoid draing over the objects etc
	* This will save calculating the positions and indexes twice
	* Added:
		TrackRendered_Row			!by 0
		TrackRendered_Index			!fill 25
		TrackRendered_YPos			!fill 25
		TrackRendered_XPosLeft		!fill 25
		TrackRendered_XPosRight		!fill 25
		TrackRendered_ScrLo			!fill 25
		TrackRendered_ScrHi			!fill 25

	* Added:
		TrackRendered_PreviousRow
		TrackRendered_IndexNext
		TrackRendered_XPos[Left/Right]Next
	* Info:
		After rendering this is the number of entries in the below tables
		TrackRendered_YPos			Y Position on the screen for this rendered line
		TrackRendered_Index			Index of the line that is rendered
		TrackRendered_IndexNext		For the above index the next line index. If it is -1 then no next line was rendered for this position
									Then some extra searching downwards will be needed to get the position delta
		TrackRendered_ScrLo/Hi		Screen address for this rendered line
		TrackRendered_XPosLeft		Left position
		TrackRendered_XPosLeftNext	Left position next
		TrackRendered_XPosRight		As above, but for right
		TrackRendered_XPosRightNext	Ditto

	* Graphics\Level1.ctm has some example left side road slopes on the bottom row
		Use these and draw slopes using the calculated edge data
		Quite successful with the rendering implemented so far!


* Right hand edge
	Take the code for the left edge, make it a macro and input the relevant left/right edge tables plus the character offset and the iny/dey parts will need handling



* The track side object table at $7c00 should be stored differently to allow easier offset into the data structure
	* Done - Vertically instead of horizontally would be easier to work with
	* Done - Storing the data in packed format would save a lot of memory
		Complete implementation of packed blockplot using RoadObject_dataLo/Hi
		Then shift RoadObject_data to $8000 instead of $b000
	Now the road side object data size is $584 compared to $1500 bytes




* Add horizon graphics from char 60 in 4x3 block
	* HorizonDraw to use ymax and ypost



* Add pause/quit handling



* Investigate Debug_ForceTrackStateRender=$c7 it isn't rendering the smooth edge, probably something to do with the edge trace not finding the right gradient?
	trckoft = $1c
	The x register was advancing 1 too far in .sameX, so added .endRow




* Investigate Debug_ForceTrackStateRender=$4a to handle segments like:	**			**
																		**			**
																		****		*****
																		******		*******
	* This would need some extra logic to stop the vertical draw one row earlier, if the gap is more than 1 char, to allow the horizontal smoothing to take over
	* Changed the edge overdraw test a little and where it's used



* During hill sections when the track is far off to the side there are occaisional vertical smoothed edges being plotted "under" the road.
	For every entry in the smooth edge table, TrackRendered_*, include the max y used for that road row. Use that to limit the draw of vertical smoothed edge plots.
	When Debug_ForceTrackStateRender=$ca to the far left/right
	* Added TrackRendered_YMax and checks in MTrackDraw_CheckYMax




* Add multiplexor animation copy and sort
	Create simple animation library in Scroller?
	Used ScrollerAnimation.a



* Move TrackDraw_colours to speed code in the cartridge
	RoadsideObjectColourLookup cannot be in the cart space!



* Add some extra sprite objects tied to road position
	EnemyCar.spd
	Think about defining a generic way to define these objects, from their single sprite to multi-sprite formations
	Especially with regards to road position, perspective step/size and any angled/twisted left/right versions that might be used
	* In progress: .gotASprite RoadObject_Sprite_Type_EnemyCar SpriteRoadTab
