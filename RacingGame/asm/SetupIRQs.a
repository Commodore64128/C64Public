MarkIRQCode = *
IRQ_InGameMode !by 0
!zn
SetupIRQs
	sei
	; Setup raster IRQ
	lda #<IrqTopOfScreen
	sta Scroller_IRQVectorLo
	lda #>IrqTopOfScreen
	sta Scroller_IRQVectorHi
	lda #1
	sta VIC2InteruptControl
	lda #$0
	sta VIC2Raster
	sta NMINotTimerGenerated

	+MACROAckRasterIRQ_A

	; Setup NMI
	lda #<ScrollerNMI1
	sta Scroller_NMIVectorLo
	lda #>ScrollerNMI1
	sta Scroller_NMIVectorHi
	; Turn on NMI generated by timer B
	lda #$81
	sta CIA2InterruptControl


	lda #1
	sta IRQ_InGameMode

	+MACROAckAllIRQs_A

	cli
	rts

!zn
SetupIRQsForTitleScreen
	sei
	lda #1
	sta VIC2InteruptControl
	jsr Multiplex_StartTopInterrupt
	+MACROAckAllIRQs_A

	lda #0
	sta IRQ_InGameMode

	cli
	rts

; Remove all possibility that the timings will change due to previous code
!align 255,0
!zn
ScrollerNMI1
!ifdef Scroller_DebugNMIBorder {
	dec VIC2BorderColour
}
	sta NMI_areg
;	stx NMI_xreg
	sty NMI_yreg

	; Check to see if this NMI happened due to the timer happening.
	; If not then we assume restore was pressed so we flag it for the game mainline to quit.
	lda CIA2InterruptControl
	and #1
	bne .wasTimer
	lda #1
	sta NMINotTimerGenerated
	; Don't do any other work since we are not timer generated.
	jmp .retNMI
.wasTimer

	lda GameScreenBGCol0
	ldy VIC2Raster
.rwl1
	cpy VIC2Raster
	beq .rwl1
	; The NMI CIA timer setup code will need changing if the below code significantly changes cycle count.
	sta VIC2ScreenColour

.retNMI
	lda NMI_areg
;	ldx NMI_xreg
	ldy NMI_yreg

!ifdef Scroller_DebugNMIBorder {
	inc VIC2BorderColour
}
	rti
NMI_areg !by 0
NMI_xreg !by 0
NMI_yreg !by 0

topIRQDone				!by 0
bottomMultiplexIRQDone	!by 0
panelIRQDone			!by 0

NMINotTimerGenerated	!by 0

; Updated by the mainline
topScreenBank			!by 1

!ifdef Scroller_MultiDirection {
scrollRegUsedX !by 0
scrollRegUsedY !by 0
} else {

!ifdef Scroller_IsHorizontal {
scrollRegUsedX !by 0
} else {
scrollRegUsedY !by 0
}

}


!ifdef Scroller_MultiDirection {
IRQUsedScreenScrollY !by 0
} else {
IRQUsedScreenScrollPos !by 0
}

!zn
; Timed to be just above the bad line for easier timing
.timerCountTweak = 7
.timerCountTweakFine = 18
NMIRaster !by 50
.timerCalc !by 0,0
IrqTopOfScreen
!ifdef Scroller_DebugIRQBorder {
	inc VIC2BorderColour
}
	; We store these with the multiplex temp registers because we call Multiplex_maininterEx
	sta Multiplex_areg
	stx Multiplex_xreg
	sty Multiplex_yreg

	lda NMIRaster
	sec
	sbc #.timerCountTweak 
	sta .timerCalc
	lda #0
	sta .timerCalc+1

	; Mul 64 x 16 bit
!for .i , 6 {
	asl .timerCalc
	rol .timerCalc+1
}
	lda .timerCalc
	sec
	sbc #.timerCountTweakFine
	sta CIA2TimerALo
	lda .timerCalc+1
	sbc #0
	sta CIA2TimerAHi

	; Turn on timer A
	lda #$9						; Trigger timer A once only
	sta CIA2TimerAControl
	; Reset interrupt control for NMI so that if restore is pressed it only misses one frame.
	lda #$81
	sta CIA2InterruptControl

	; Then disable all the sprites
	lda #0
	sta VIC2SpriteEnable

	lda #VIC2Colour_LightRed
	sta VIC2ScreenColour
	lda GameScreenBGCol1
	sta VIC2ExtraBackgroundColour1
	lda GameScreenBGCol2
	sta VIC2ExtraBackgroundColour2

	inc topIRQDone
	lda #0
	sta bottomMultiplexIRQDone
	sta panelIRQDone

	lda topScreenBank
	asl		; Move up into the screen setup
	asl
	asl
	asl
	ora #2	; Charset
	sta VIC2MemorySetup

	lda #0
	sta CIA2PortASerialBusVICBank

!ifdef Scroller_DebugIRQBorder {
	dec VIC2BorderColour
}

	jmp Multiplex_maininterEx

!zn
irqAStore !by 0
irqXStore !by 0
irqYStore !by 0
MultiplexExt_LastIRQ
!ifdef Scroller_DebugIRQBorder {
	inc VIC2BorderColour
}
	sta irqAStore

	lda #scorePanelPos1
	sta VIC2Raster

	lda #<ScorePanel1
	sta Scroller_IRQVectorLo
	lda #>ScorePanel1
	sta Scroller_IRQVectorHi

	inc bottomMultiplexIRQDone

	lda irqAStore

!ifdef Scroller_DebugIRQBorder {
	dec VIC2BorderColour
}
	jmp Multiplex_AckExitInterrupt


ScorePanel1
!ifdef Scroller_DebugIRQBorder {
	inc VIC2BorderColour
}
	sta irqAStore
	stx irqXStore

	lda #0
	sta VIC2SpriteEnable

	lda #$ff
	sta VIC2Sprite0Y
	sta VIC2Sprite1Y
	sta VIC2Sprite2Y
	sta VIC2Sprite3Y
	sta VIC2Sprite4Y
	sta VIC2Sprite5Y
	sta VIC2Sprite6Y
	sta VIC2Sprite7Y

	; Switch to displaying our text screen in bank 0 to demo this
	; Bank 0 set first since the screen sprite pointers in screen $400, $800 and $c00 are all pointing to blank sprites. (set by InitBank0Data)
	lda #%11
	sta CIA2PortASerialBusVICBank
	; Then the screen data
	lda #%00010010
	sta VIC2MemorySetup

	lda #0
	sta VIC2ScreenColour
	sta VIC2ExtraBackgroundColour1
	sta VIC2ExtraBackgroundColour2
	sta VIC2ExtraBackgroundColour3

	inc panelIRQDone

	lda #0
	sta VIC2SpriteEnable
;	lda #Scroller_DiscardMinSpriteYPos-Multiplex_TopRasterHeight
	sta VIC2Raster

	lda #<IrqTopOfScreen
	sta Scroller_IRQVectorLo
	lda #>IrqTopOfScreen
	sta Scroller_IRQVectorHi

	+MACROAckRasterIRQ_A
	lda irqAStore
	ldx irqXStore

!ifdef Scroller_DebugIRQBorder {
	dec VIC2BorderColour
}

	+Multiplex_IRQExit

MarkIRQCode_End = *
