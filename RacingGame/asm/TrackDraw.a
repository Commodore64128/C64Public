!zn
; high and low screen addresses
TrackDraw_ScreenHi !fill VIC2ScreenCharsHeight

TrackDraw_tableHi
	!for .y , VIC2ScreenCharsHeight { !by >((.y-1) * VIC2ScreenCharsWidth) }
	!by 0
	!for .y , VIC2ScreenCharsHeight { !by 4 + >((.y-1) * VIC2ScreenCharsWidth) }
	!by 0

TrackDraw_tableLo
	!for .i , 2 {
		!for .y , VIC2ScreenCharsHeight { !by <((.y-1) * VIC2ScreenCharsWidth) }
		!by 0
	}


; high and low screen addresses for block plotting
xwid !by 4
ywid !by 8
ybtl !by 19
xbtl !by 19
xhot !by 4
ymax !by 20
ybt !by 0
ypl !by 0
block_dataLo	!by 0
block_dataHi	!by 0


TrackDraw_steeringLo
!for .i , kRoadSteeringSteps+1 {
	!by <(Data_steeringOffset+((.i-1)*kRoadRows))
}

TrackDraw_steeringHi
!for .i , kRoadSteeringSteps+1 {
	!by >(Data_steeringOffset+((.i-1)*kRoadRows))
}


TrackDraw_perspectiveSideObject !by 0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5
	!by 6,6,6,6,7,7,7,7,8,8,8,8
	!by 8,8,8,8,8,8,8,8,8,8,8,8

RoadObjects_left !by 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
; spare
	!by 0,0,0

RoadObjects_right !by 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
; spare
	!by 0,0,0


RoadObject_Sprite_Type_EnemyCar = 1

; With some spare
RoadObject_Sprite
	!by RoadObject_Sprite_Type_EnemyCar
	!fill 14 , 0
	!by RoadObject_Sprite_Type_EnemyCar
	!fill 19 , 0
	!by RoadObject_Sprite_Type_EnemyCar
	!fill 4 , 0

PerspectiveTab_13
	!by  0, 0, 1, 1, 2, 2, 3, 3, 4, 4
	!by  5, 5, 6, 6, 7, 7, 8, 8, 9, 9
	!by  9,10,10,10,11,11,11,11,12,12
	!by 12,12,12,12,12,12

RoadObject_Sprite_size		= 7
RoadObject_Sprite_xoft		= 0
RoadObject_Sprite_yoft		= 1
RoadObject_Sprite_left		= 2
RoadObject_Sprite_right		= 3
RoadObject_Sprite_spr1		= 4
RoadObject_Sprite_spr2		= 5
RoadObject_Sprite_spr3		= 6

!macro RoadObject_Sprite_1 .offsetX , .offsetY , .spr1 {
	!by .offsetX , .offsetY , 0 , 0 , .spr1 , 0 , 0
}
!macro RoadObject_Sprite_2 .offsetX , .offsetY , .spr1 , .spr2 {
	!by .offsetX , .offsetY , 0 , 0 , .spr1 , .spr2 , 0
}
!macro RoadObject_Sprite_2_lr .offsetX , .offsetY , .left , .right , .spr1 , .spr2 {
	!by .offsetX , .offsetY , .left , .right , .spr1 , .spr2 , 0
}
!macro RoadObject_Sprite_3 .offsetX , .offsetY , .spr1 , .spr2 , .spr3 {
	!by .offsetX , .offsetY , 0 , 0 , .spr1 , .spr2 , .spr3
}


!macro RoadObject_Sprite_to_plexor .enemyCarSprites , .sprObjX , .sprObjY , .index , .xoft {
	cpy #Multiplex_items-4
	bcc .gotSpace0
	rts
.gotSpace0

	; Sprite 1
	lda .enemyCarSprites + .index,x
	sta AnimationSpriteFrame,y
	lda #VIC2Colour_LightBlue
	sta AnimationSpriteColour,y
	lda .enemyCarSprites + RoadObject_Sprite_xoft,x
	clc
	adc .sprObjX
!if .xoft > 0 {
	clc
	adc #.xoft
}
	asl
	sta AnimationXPosLo,y
	lda #0
	rol
	sta AnimationXPosHi,y

	lda .enemyCarSprites + RoadObject_Sprite_yoft,x
	clc
	adc .sprObjY
	sta AnimationYPos,y

	inc RoadObject_AnimationIndex
	iny
}


MulTab_RoadObject_Sprite_size
	!for .a , 13 {
		!by (.a-1) * RoadObject_Sprite_size
	}


col1 !by 10
col2 !by 9
tsdx !by 0
tsdy !by 0
tsdy2 !by 0
sidel !by 0
rast !by 122
boty !by 20
lpose !by 0
rpose !by 0
skd !by kRoadSteeringSteps
trckoft !by 21
trckoft2 !by $2c
ancnt1 !by 0
ancnt2 !by 70
ytrack !by 0
turbo !by 0
spdom1 !by 10
spdom2 !by 0
ypost !fill 40,0
xwidt !fill 40,0
toftt !fill 40,0
corntab !fill 40,18
lpos !by 0
rpos !by 0
lsty !by 0
yfl !by 0


TrackRendered_Row			!by 0
TrackRendered_PreviousRow	!by -1

TrackRendered_Index			!fill 25
TrackRendered_IndexNext		!fill 25
TrackRendered_YPos			!fill 25
TrackRendered_XPosLeft		!fill 25
TrackRendered_XPosRight		!fill 25
TrackRendered_XPosLeftNext	!fill 25
TrackRendered_XPosRightNext	!fill 25
TrackRendered_ScrLo			!fill 25
TrackRendered_ScrHi			!fill 25
TrackRendered_YMax			!fill 25

!zn
!macro MTrackDraw_EdgeChar .char {
	cpy #40
	bcs .nextChar
	lda (TrackDraw_ZP_ScreenLoHi),y
	bne .nextChar
	lda #.char
	sta (TrackDraw_ZP_ScreenLoHi),y
.nextChar
}

!macro MTrackDraw_EdgeCharInside .char {
	cpy #40
	bcs .nextChar
	lda (TrackDraw_ZP_ScreenLoHi),y
	cmp #50
	bcs .nextChar
	lda #.char
	sta (TrackDraw_ZP_ScreenLoHi),y
.nextChar
}

!macro MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow {
	inc .tempYPos
	lda .tempYPos
	cmp .tempYMax
	bcc .ok1
	jmp .endRow
.ok1
}

TrackDraw_AdvanceRow
	lda TrackDraw_ZP_ScreenLoHi
	clc
	adc #40
	sta TrackDraw_ZP_ScreenLoHi
	bcc .tdar1
	inc TrackDraw_ZP_ScreenLoHi+1
.tdar1
	rts

!zn
TrackDraw_SmoothEdgeFixup
	ldx #0

.l1
	lda TrackRendered_IndexNext,x
	bpl .gotNext

.calculateNextRow
	; Start from the current position
	ldy TrackRendered_Index,x
	lda ypost,y

.l2
	cpy #35
	beq .gotNextY
	cmp ypost,y
	bne .gotNextY
	iny
	jmp .l2

.gotNextY
	; Calculate the next positions
	lda #19
	sec
	sbc xwidt,y
	clc
	adc toftt,y
	sta TrackRendered_XPosLeftNext,x

	lda #21
	clc
	adc xwidt,y
	clc
	adc toftt,y
	sta TrackRendered_XPosRightNext,x

.gotNext
	inx
	cpx TrackRendered_Row
	beq .ret
	jmp .l1
.ret
	rts


!source "asm/TrackDraw_EdgeLeft.a"
!source "asm/TrackDraw_EdgeRight.a"

!zn

; MPi: TODO: This takes more than a frame
; This is an exceptionally good candidate for speed code in cart banks
TrackDraw_colours
	lda topScreenBank
	beq .displaying_c0

	lda #CartFile1_Bank_Colourise_c400_bin
	+MACRO_CartSelectBank_8K_NoSEI_A
	jsr CartFile1_Start_Colourise_c400_bin
	lda #CartFile1_Bank_Colourise_c400_2_bin
	+MACRO_CartSelectBank_8K_NoSEI_A
	jsr CartFile1_Start_Colourise_c400_2_bin
	+MACRO_CartKillBank
	rts

.displaying_c0
	lda #CartFile1_Bank_Colourise_c000_bin
	+MACRO_CartSelectBank_8K_NoSEI_A
	jsr CartFile1_Start_Colourise_c000_bin
	lda #CartFile1_Bank_Colourise_c000_2_bin
	+MACRO_CartSelectBank_8K_NoSEI_A
	jsr CartFile1_Start_Colourise_c000_2_bin
	+MACRO_CartKillBank
	rts


TrackDraw_setup

	ldx topScreenBank
	lda BankToAddrOffscreen,x
	sta .sm1+1

	lda #0
	sta TrackRendered_Row
	lda #-1
	sta TrackRendered_PreviousRow

	ldx #24
.up1
	lda TrackDraw_tableHi,x
.sm1	ora #0
	sta TrackDraw_ScreenHi,x
	dex
	bpl .up1

	ldx trckoft
	lda TrackDraw_tableHi,x
	ora #>Data_RoadYPosByRows
	sta TrackDraw_ZP_TrackLoHi+1
	lda TrackDraw_tableLo,x
	sta TrackDraw_ZP_TrackLoHi
	ldy #37
	lda (TrackDraw_ZP_TrackLoHi),y
	tax
	asl
	asl
	asl
	clc
	adc #VIC2SpriteYBorderTop
	sta rast
l5x
	lda TrackDraw_tableLo,x
	sta l5y+1
	lda TrackDraw_ScreenHi,x
	sta l5y+2
	ldy #39
	lda #0
l5y	sta $c000,y
	dey
	bpl l5y
	dex
	bpl l5x

	ldy #39
l5
	lda (TrackDraw_ZP_TrackLoHi),y
	sta ypost,y
	dey
	bpl l5

	; This reads the matching road width tweaks for the road row Y position
;	ldx #$18
;	lda TrackDraw_tableLo,x
;	sta TrackDraw_ZP_TrackLoHi
	ldx trckoft
	lda TrackDraw_tableHi,x
	ora #>Data_RoadWidthByRows
	sta TrackDraw_ZP_TrackLoHi+1

	lda #255
	sta lsty
	ldy #39
l6
	lda (TrackDraw_ZP_TrackLoHi),y
;	lda #2
	sta xwidt,y
	dey
	bpl l6

	; Setup the bottom clipping position to be any hill crest
	ldx ypost+38
	lda ypost,x
	sta ymax

	rts

!zn
RoadObject_AnimationIndex	!by 3
TrackDraw_chars
	lda #3
	sta RoadObject_AnimationIndex

	; Start drawing from the far row
	ldy #0
	sty yfl
l7
;	+WaitForFire_A

	ldy yfl

	; Once the hill crest has been encountered then set the maximum screen height
	cpy ypost+38
	bcc .notNearCrest
	lda #20
	sta ymax
.notNearCrest

	lda ypost,y
	cmp lsty
	bne l10lo
	jmp l10

.ll10
	lda #-1
	sta TrackRendered_PreviousRow
	jmp l10

l10lo
	; Row index >= any crest? Then skip the y pos check
	cpy ypost+38
	bcs l10a

	; Row y pos >= crest? Then skip drawing the row
	cmp ymax
	bcs .ll10
l10a
	ldx TrackRendered_Row
	sta TrackRendered_YPos,x

	tax
	stx lsty

	lda TrackDraw_tableLo,x
	sta TrackDraw_ZP_ScreenLoHi
	lda TrackDraw_ScreenHi,x
	sta TrackDraw_ZP_ScreenLoHi+1
;	cpx #20
;	bcs l10
	lda #19
	sec
	sbc xwidt,y
	clc
	adc toftt,y
	sta lpos

	ldx TrackRendered_Row
	sta TrackRendered_XPosLeft,x

	; Store the row index
	tya
	sta TrackRendered_Index,x

	lda #21
	clc
	adc xwidt,y
	clc
	adc toftt,y
	sta rpos

	sta TrackRendered_XPosRight,x
	inc TrackRendered_Row

	lda TrackDraw_ZP_ScreenLoHi
	sta TrackRendered_ScrLo,x
	lda TrackDraw_ZP_ScreenLoHi+1
	sta TrackRendered_ScrHi,x

	lda ymax
	sta TrackRendered_YMax,x

	lda #-1
	sta TrackRendered_IndexNext,x

	ldy TrackRendered_PreviousRow
	bmi .noValidPrevious

	; Update any next values from the previous row
	lda TrackRendered_XPosRight,x
	sta TrackRendered_XPosRightNext,y
	lda TrackRendered_XPosLeft,x
	sta TrackRendered_XPosLeftNext,y

	txa
	sta TrackRendered_IndexNext,y

.noValidPrevious

	stx TrackRendered_PreviousRow

	; Clear the current line and draw the road span all in one go
	lda #0
	ldy #39
.rsl1
	cpy rpos
	bmi .doRoad1
	sta (TrackDraw_ZP_ScreenLoHi),y
	dey
	bpl .rsl1
	jmp l10

.doRoad1
	lda #1
.rsl2
	cpy lpos
	bmi .doGround1
	sta (TrackDraw_ZP_ScreenLoHi),y
	dey
	bpl .rsl2
	jmp l10

.doGround1
	lda #0
.rsl3
	sta (TrackDraw_ZP_ScreenLoHi),y
	dey
	bpl .rsl3

	
l10
	ldy yfl
	jsr objsprint
	inc yfl
	lda yfl
	cmp #kRoadRows
	beq loop
	jmp l7
loop
	rts

TrackDraw_offscreen
loop2
	lda 56320
	and #1
	bne m1z
	dec spdom1
	bne m1b
	lda #10
	sta spdom1
	lda spdom2
	cmp #3
	beq m1b
	inc spdom2
	jmp m1b
m1z
	dec spdom1
	bne m1b
	lda #10
	sta spdom1
	lda spdom2
	beq m1b
	dec spdom2
m1b
	lda 56320
	and #8
	bne m1
	jsr left
	jmp loopr
m1
	lda 56320
	and #4
	bne m2
	jsr right
	jmp loopr
m2	jsr animback
loopr

	; Debug single step
	lda #JoystickBits_Fire
	bit CIA1KeyboardColumnJoystickA
	bne .noFire
	lda #0
	sta spdom2
.smPrevFire	lda #0
	bne .noFire2
	inc .smPrevFire+1
	lda #1
	sta spdom2
	jmp .noFire2
.noFire
	lda #0
	sta .smPrevFire+1
.noFire2

	ldy spdom2
	beq loopr2
loopr3
	jsr advance

	lda HorizonXPostion
	clc
	adc lastCorner
	sta HorizonXPostion

	dey
	bne loopr3

loopr2
	jsr cornoftfig
	jsr trackoftfig
	ldx trckoft2
loop2z
	lda tabletrck,x
	sta trckoft
	rts

tabletrck = Data_trackYPos
tablecorn = Data_trackCorner

lastCorner !by 0

cornoftfig
	ldy trckoft2
	lda tablecorn,y
	sec
	sbc #19
	cmp #$80
	ror
	cmp #$80
	ror
	sta lastCorner

	ldx tablecorn,y
	cpx #19
	bcs rcorn
	lda TrackDraw_tableHi,x
	ora #>Data_cornerOffsets
	sta tcf1+2
	lda TrackDraw_tableLo,x
	sta tcf1+1
	ldx #35
tcf1 lda $5000,x
	sta corntab,x
	dex
	bpl tcf1
	rts

rcorn
	txa
	sec
	sbc #19
	sta cb1+1
	lda #18
	sec
cb1 sbc #0
	tax
	lda TrackDraw_tableHi,x
	ora #>Data_cornerOffsets
	sta tcf2+2
	lda TrackDraw_tableLo,x
	sta tcf2+1
	ldx #35
tcf2 lda $5000,x
	sta corntab,x
	lda #0
	sec
	sbc corntab,x
	sta corntab,x
	dex
	bpl tcf2
	rts

trackoftfig
	ldx skd
	cpx #kRoadSteeringSteps+1
	bcs t1

	lda #kRoadSteeringSteps
	sec
	sbc skd
	tax
	lda TrackDraw_steeringLo,x
	sta t2b+1
	lda TrackDraw_steeringHi,x
	sta t2b+2

	ldx #35
t2
	lda #0
	sec
t2b	sbc $5000,x
	clc
	adc corntab,x
	sta toftt,x
	dex
	bpl t2
	rts

t1
	lda skd
	sec
	sbc #kRoadSteeringSteps
	tax
	lda TrackDraw_steeringLo,x
	sta t3+1
	lda TrackDraw_steeringHi,x
	sta t3+2
	ldx #35

t3	lda $5000,x
	clc
	adc corntab,x
	sta toftt,x
	dex
	bpl t3
	rts

left dec skd
	jsr canimr
	lda skd
	cmp #$ff
	bne m4
	lda #0
	sta skd
m4 rts
right inc skd
	jsr caniml
	lda skd
	cmp #(kRoadSteeringSteps*2)+1
	bne m5
	lda #kRoadSteeringSteps*2
	sta skd
m5 rts


caniml
	lda ancnt2
	cmp #64
	beq ca1
	inc ancnt1
	lda ancnt1
	cmp #2
	bne ca1
	lda #0
	sta ancnt1
	dec ancnt2
	dec ancnt2
	dec ancnt2
ca1	rts

canimr
	lda ancnt2
	cmp #76
	beq ca2
	inc ancnt1
	lda ancnt1
	cmp #2
	bne ca2
	lda #0
	sta ancnt1
	inc ancnt2
	inc ancnt2
	inc ancnt2
ca2	rts

animback
	lda ancnt2
	cmp #70
	beq ca3
	bcs caniml
	bcc canimr
ca3	rts


blockplot
	lda block_dataLo
	sta blps1+1
	lda block_dataHi
	sta blps1+2

	lda ywid
	sta ybt
	lda ybtl
	sec
	sbc ywid
	sta ypl
	inc ypl
bl1
	ldx ypl
	cpx ymax
	bcs bl2
	lda TrackDraw_tableLo,x
	sta blpt1+1
	lda TrackDraw_ScreenHi,x
	sta blpt1+2

	lda xbtl
	sec
	sbc xhot
	tay
	ldx #0
bl3
	cpy #40
	bcs bl3b
blps1 lda $8000,x
	beq bl3b
blpt1 sta $0400,y
bl3b
	iny
	inx
	cpx xwid
	bne bl3
bl2
	inc ypl
	lda blps1+1
	clc
	adc xwid
	sta blps1+1
	bcc .noC1
	inc blps1+2
.noC1
	dec ybt
	bne bl1

blend
	rts

objsprint
	sty tsdy
	ldx RoadObjects_left,y
	beq l10g

	dex
	txa
	clc
	adc TrackDraw_perspectiveSideObject,y
	tax
	stx tsdx
	lda ypost,y
	sta ybtl
	dec ybtl
	lda RoadObject_width,x
	sta xwid
	lda RoadObject_height,x
	sta ywid

	lda RoadObject_dataLo,x
	sta block_dataLo
	lda RoadObject_dataHi,x
	sta block_dataHi

	lda #19
	sec
	sbc xwidt,y
	clc
	adc toftt,y
	sta xbtl
	lda RoadObject_hotLeft,x
	sta xhot
	jsr blockplot

	; Now the right hand road edge
l10g
	ldy tsdy
	ldx RoadObjects_right,y
	beq l10gz
	dex
	txa
	clc
	adc TrackDraw_perspectiveSideObject,y
	tax
	stx tsdx
	lda ypost,y
	sta ybtl
	dec ybtl
	lda RoadObject_width,x
	sta xwid
	lda RoadObject_height,x
	sta ywid

	lda RoadObject_dataLo,x
	sta block_dataLo
	lda RoadObject_dataHi,x
	sta block_dataHi

	lda #21
	clc
	adc xwidt,y
	clc
	adc toftt,y
	sta xbtl
oi5	lda RoadObject_hotRight,x
	sta xhot
	jsr blockplot
l10gz

	lda ypost,y
	cmp ymax
	bcs .skipSprite
	ldy tsdy
	lda RoadObject_Sprite,y
	bne .gotASprite
.skipSprite
	rts

.gotASprite
	cmp #RoadObject_Sprite_Type_EnemyCar
	beq .gotEnemyCar
	rts

.gotEnemyCar
	lda PerspectiveTab_13,y
	tax
	lda MulTab_RoadObject_Sprite_size,x
	tax

	; Figure out the X and Y position
	lda #20
	clc
	adc toftt,y

	; Signed horizontal clip test
	cmp #50
	bpl .skipSprite
	cmp #-10
	bmi .skipSprite

.okPos
	; Note: Mul 4, the final mul 2 is later on
	asl
	asl
	clc
	adc #VIC2SpriteXBorderLeft/2	; Note: Div 2
	sta .sprObjX

	cmp #kRoadSteeringSteps
	bcc .isLeft
	cmp #130
	bcs .isRight
	jmp .isStraight
.isLeft
	lda .enemyCarSprites + RoadObject_Sprite_left,x
	beq .isStraight
	tax
	jmp .isStraight

.isRight
	lda .enemyCarSprites + RoadObject_Sprite_right,x
	beq .isStraight
	tax
;	jmp .isStraight

.isStraight
	lda ypost,y
	asl
	asl
	asl
	clc
	adc #VIC2SpriteYBorderTop
	sta .sprObjY

	ldy RoadObject_AnimationIndex

	+RoadObject_Sprite_to_plexor .enemyCarSprites , .sprObjX , .sprObjY , RoadObject_Sprite_spr1 , 0
	+RoadObject_Sprite_to_plexor .enemyCarSprites , .sprObjX , .sprObjY , RoadObject_Sprite_spr2 , VIC2SpriteSizeX/2
	+RoadObject_Sprite_to_plexor .enemyCarSprites , .sprObjX , .sprObjY , RoadObject_Sprite_spr3 , VIC2SpriteSizeX
	
	rts
.sprObjX !by 0
.sprObjY !by 0

.enemyCarSprites
	+RoadObject_Sprite_1		 -1 , -20 + 1 ,	64 + 15 + 32
	+RoadObject_Sprite_1		 -2 , -20 + 2 ,	64 + 15 + 31
	+RoadObject_Sprite_1		 -2 , -20 + 2 ,	64 + 15 + 30
	+RoadObject_Sprite_1		 -2 , -20 + 3 ,	64 + 15 + 29
	+RoadObject_Sprite_1		 -4 , -20 + 3 ,	64 + 15 + 28
	+RoadObject_Sprite_1		 -5 , -20 + 4 ,	64 + 15 + 27
	+RoadObject_Sprite_1		 -6 , -20 + 5 ,	64 + 15 + 26
	+RoadObject_Sprite_2		 -7 , -20 + 7 ,	64 + 15 + 24 ,	64 + 15 + 25
	+RoadObject_Sprite_2		 -8 , -20 + 7 ,	64 + 15 + 22 ,	64 + 15 + 23
	+RoadObject_Sprite_2		 -9 , -20 + 7 ,	64 + 15 + 20 ,	64 + 15 + 21
	+RoadObject_Sprite_2_lr		 -9 , -20 + 8 ,	.enemyCarSprite_10_left - .enemyCarSprites , .enemyCarSprite_10_right - .enemyCarSprites , 64 + 15 + 16 ,	64 + 15 + 17
	+RoadObject_Sprite_2_lr		-10 , -20 + 8 ,	.enemyCarSprite_11_left - .enemyCarSprites , .enemyCarSprite_11_right - .enemyCarSprites , 64 + 15 + 10 ,	64 + 15 + 11
	+RoadObject_Sprite_2_lr		-11 , -20 + 8 ,	.enemyCarSprite_12_left - .enemyCarSprites , .enemyCarSprite_12_right - .enemyCarSprites , 64 + 15 + 3 ,	64 + 15 + 4

.enemyCarSprite_10_left
	+RoadObject_Sprite_2		-9 , -20 + 8 ,	64 + 15 + 18 ,	64 + 15 + 19

.enemyCarSprite_10_right
	+RoadObject_Sprite_2		-9 , -20 + 8 ,	64 + 15 + 14 ,	64 + 15 + 15

.enemyCarSprite_11_left
	+RoadObject_Sprite_2		-10 , -20 + 8 ,	64 + 15 + 12 ,	64 + 15 + 13

.enemyCarSprite_11_right
	+RoadObject_Sprite_2		-10 , -20 + 8 ,	64 + 15 + 8 ,	64 + 15 + 9

.enemyCarSprite_12_left
	+RoadObject_Sprite_3		-11 , -20 + 8 ,	64 + 15 + 5 ,	64 + 15 + 6 ,	64 + 15 + 7

.enemyCarSprite_12_right
	+RoadObject_Sprite_3		-11 , -20 + 8 ,	64 + 15 + 0 ,	64 + 15 + 1 ,	64 + 15 + 2


advance
	ldx #34
ad1
	lda RoadObjects_left,x
	sta RoadObjects_left+1,x
	lda RoadObjects_right,x
	sta RoadObjects_right+1,x
	lda RoadObject_Sprite,x
	sta RoadObject_Sprite+1,x
	dex
	bpl ad1

	ldx #34
ad2
	lda RoadObjects_left,x
	sta RoadObjects_left+1,x
	lda RoadObjects_right,x
	sta RoadObjects_right+1,x
	lda RoadObject_Sprite,x
	sta RoadObject_Sprite+1,x
	dex
	cpx #13
	bne ad2

	lda #0
	sta RoadObjects_right+14
	sta RoadObjects_left+14
	sta RoadObject_Sprite+14
	ldx sidel
	lda Data_trackEdgeLeft,x
	sta RoadObjects_left
	lda Data_trackEdgeRight,x
	sta RoadObjects_right
	lda Data_trackSprites,x
	sta RoadObject_Sprite
	inc sidel
	inc trckoft2
	rts
