!zn
!macro TrackDraw_SmoothEdge .offset , .direction , .xPosLeft , .xPosLeftNext {
	lda #.direction
	sta .previousGoodDirection
	ldx #0
	stx .previousGoodDirectionAfterVertical
.l1
	lda TrackRendered_ScrLo,x
	sta TrackDraw_ZP_ScreenLoHi
	lda TrackRendered_ScrHi,x
	sta TrackDraw_ZP_ScreenLoHi+1

	lda TrackRendered_IndexNext,x
	bpl .gotNext
	lda #0
	sta .previousGoodDirection
.gotNext

	lda .xPosLeft,x
	cmp .xPosLeftNext,x
	beq .lsameX
!if .direction < 0 {
	bmi .lleftToRight
} else {
	bpl .lleftToRight
}

	ldy .previousGoodDirectionAfterVertical
	beq .noApex
!if .direction < 0 {
	bpl .noApex
} else {
	bmi .noApex
}
	; If the next row would use a 0/-direction gradient then continue as normal
	lda .xPosLeftNext-1,x
	sec
	sbc .xPosLeft-1,x
	beq .noApex2
	cmp #-.direction
	beq .noApex2

	; Since the step from vertical to horizontal would be too sharp, handle apex by rewinding one row
	dex
	lda TrackRendered_ScrLo,x
	sta TrackDraw_ZP_ScreenLoHi
	lda TrackRendered_ScrHi,x
	sta TrackDraw_ZP_ScreenLoHi+1
.noApex2
	lda .xPosLeft,x

.noApex

	tay
!if .direction < 0 {
	dey
} else {
;	iny
}
	; Right to Left
	sec
	sbc .xPosLeftNext,x

	sta .previousGoodDirection

	cmp #1		* (-.direction)
	bne .not1

	+MTrackDraw_EdgeCharInside 6		+ .offset

	jmp .nextRowResetPrevious

.previousGoodDirection !by 0
.previousGoodDirectionAfterVertical !by 0

.lsameX jmp .sameX
.lleftToRight jmp .leftToRight

.not1
	cmp #2		* (-.direction)
	bne .not2

	+MTrackDraw_EdgeCharInside 8		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 7		+ .offset
	jmp .nextRowResetPrevious

.not2

	cmp #3		* (-.direction)
	bne .not3

	+MTrackDraw_EdgeCharInside 14		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 12		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 9		+ .offset
	jmp .nextRowResetPrevious

.not3

	cmp #4		* (-.direction)
	bne .not4

	+MTrackDraw_EdgeCharInside 15		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 13		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 11		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 9		+ .offset
	jmp .nextRowResetPrevious

.not4

	cmp #5		* (-.direction)
	bne .not5

	+MTrackDraw_EdgeCharInside 15		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 14		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 12		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 9		+ .offset
	jmp .nextRowResetPrevious

.not5

	cmp #6		* (-.direction)
	bne .not6

	+MTrackDraw_EdgeCharInside 15		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 14		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 13		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 11		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 9		+ .offset
	jmp .nextRowResetPrevious

.not6

	+MTrackDraw_EdgeCharInside 15		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 14		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 13		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 12		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 11		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 9		+ .offset
	jmp .nextRowResetPrevious


.leftToRight
	ldy .previousGoodDirectionAfterVertical
	beq .onoApex
!if .direction > 0 {
	bpl .onoApex
} else {
	bmi .onoApex
}
	; If the next row would use a 0/-direction gradient then continue as normal
	lda .xPosLeftNext-1,x
	sec
	sbc .xPosLeft-1,x
	beq .onoApex2
	cmp #.direction
	beq .onoApex2

	; Since the step from vertical to horizontal would be too sharp, handle apex by rewinding one row
	dex
	lda TrackRendered_ScrLo,x
	sta TrackDraw_ZP_ScreenLoHi
	lda TrackRendered_ScrHi,x
	sta TrackDraw_ZP_ScreenLoHi+1
.onoApex2
;	lda .xPosLeft,x

.onoApex

	ldy .xPosLeftNext,x
!if .direction < 0 {
	dey
} else {
;	iny
}

	lda .xPosLeft,x
	sec
	sbc .xPosLeftNext,x

	sta .previousGoodDirection

	cmp #-1		* (-.direction)
	bne .notn1

	+MTrackDraw_EdgeCharInside 6	+10		+ .offset

	jmp .nextRowResetPrevious

.notn1



	cmp #-2		* (-.direction)
	bne .notn2

	+MTrackDraw_EdgeCharInside 8	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 7	+10		+ .offset
	jmp .nextRowResetPrevious

.notn2

	cmp #-3		* (-.direction)
	bne .notn3

	+MTrackDraw_EdgeCharInside 14	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 12	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 9	+10		+ .offset
	jmp .nextRowResetPrevious

.notn3

	cmp #-4		* (-.direction)
	bne .notn4

	+MTrackDraw_EdgeCharInside 15	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 13	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 11	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 9	+10		+ .offset
	jmp .nextRowResetPrevious

.notn4

	cmp #-5		* (-.direction)
	bne .notn5

	+MTrackDraw_EdgeCharInside 15	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 14	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 12	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 10	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 9	+10		+ .offset
	jmp .nextRowResetPrevious

.notn5

	cmp #-6		* (-.direction)
	bne .notn6

	+MTrackDraw_EdgeCharInside 15	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 14	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 13	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 11	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 10	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 9	+10		+ .offset
	jmp .nextRowResetPrevious

.notn6

	+MTrackDraw_EdgeCharInside 15	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 14	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 13	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 12	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 11	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 10	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 9	+10		+ .offset
!if .direction < 0 {
	dey
} else {
	iny
}
	+MTrackDraw_EdgeCharInside 0
	jmp .nextRowResetPrevious



.tempYPos !by 0
.tempYMax !by 0

.lmaxsx1
	; Handle special case for the last road row
	ldx TrackRendered_Row
	dex
	lda .xPosLeftNext,x
	inx
	jmp .maxsx1
.sameX
	sta .smxpos+1

	lda .previousGoodDirection
	sta .previousGoodDirectionAfterVertical

	lda TrackRendered_YPos,x
	sta .tempYPos
	lda TrackRendered_YMax,x
	sta .tempYMax

	; Count how many lines are the same
	ldy #1
.sx1
	iny
	cpy #6
	beq .maxsx2
	inx
	cpx TrackRendered_Row
	bcs .lmaxsx1
	lda .smxpos+1
	cmp .xPosLeftNext,x
	beq .sx1
.maxsx2
	lda .xPosLeftNext,x
.maxsx1
	cmp .smxpos+1

!if .direction < 0 {
	beq .lsxpositive
	bpl .sxnegative
} else {
	bmi .sxnegative
}
.lsxpositive	jmp .sxpositive

.sxnegative

	tya
	ldy .smxpos+1

!if .direction < 0 {
;	dey
} else {
	dey
}

	cmp #2
	bne .notsxn2

	+MTrackDraw_EdgeCharInside 4		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeCharInside 2		+ .offset

	jmp .nextRow
.notsxn2

	cmp #3
	bne .notsxn3

	+MTrackDraw_EdgeCharInside 4		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeCharInside 3		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	+MTrackDraw_EdgeCharInside 2		+ .offset

	jmp .nextRow
.notsxn3

	cmp #4
	bne .notsxn4

	+MTrackDraw_EdgeCharInside 5		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeCharInside 4		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeCharInside 3		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeCharInside 2		+ .offset

	jmp .nextRow
.notsxn4

	cmp #5
	beq .sxn5
	jmp .notsxn5
.sxn5

	+MTrackDraw_EdgeCharInside 5		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeCharInside 4		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeCharInside 3		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeCharInside 2		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeCharInside 2		+ .offset

	jmp .nextRow
.notsxn5

	+MTrackDraw_EdgeCharInside 5		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeCharInside 5		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeCharInside 5		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeCharInside 5		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeCharInside 5		+ .offset

	jmp .nextRow

.sxpositive
	tya
.smxpos	ldy #0
!if .direction < 0 {
	dey
} else {
;	iny
}

	cmp #2
	bne .notsx2

	+MTrackDraw_EdgeChar 2		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 4		+ .offset

	jmp .nextRow
.notsx2

	cmp #3
	bne .notsx3

	+MTrackDraw_EdgeChar 2		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 3		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 4		+ .offset

	jmp .nextRow
.notsx3

	cmp #4
	bne .notsx4

	+MTrackDraw_EdgeChar 2		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 3		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 4		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 5		+ .offset

	jmp .nextRow
.notsx4

	cmp #5
	beq .sx5
	jmp .notsx5
.sx5

	+MTrackDraw_EdgeChar 2		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 3		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 3		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 4		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 5		+ .offset

	jmp .nextRow
.notsx5

	+MTrackDraw_EdgeChar 3		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 3		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 3		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 3		+ .offset
	+MTrackDraw_CheckYMax .tempYPos , .tempYMax , .endRow
	jsr TrackDraw_AdvanceRow
	+MTrackDraw_EdgeChar 3		+ .offset

	jmp .nextRow

.nextRow
	inx
.endRow
	cpx TrackRendered_Row
	bcs .ret
	jmp .l1
.ret
	rts

.nextRowResetPrevious
	lda #0
	sta .previousGoodDirectionAfterVertical
	jmp .nextRow
}
