; The memory map for this title screen displays graphics data in bank 0
; $0400-$07ff - Screen
; $0800-$0fff - Char data
; $1000-$bfff - Code and data
; $c000-$ffff - Unused by the title screen and contains graphics data for the game.
!zn
DisplayTitleScreen
	; Just to make sure we disable interrupts.
	; This title screen code can use the multiplexor and animation engine if it wants to
	sei

	lda #$ff
	jsr Multiplex_SetDiscardPosition

	; Stop any NMI from its timers. NMIs generated by other sources are ignored by the NMI routine.
	lda #$7f
	sta CIA2InterruptControl
	lda #0
	sta CIA2TimerAControl
	sta CIA2TimerBControl
	; Ack any interrupts that might have happened
	lda CIA2InterruptControl

	jsr TitleScreenWaitForOffScreenFromRaster
	; Turn off the screen and sprites
	lda #0
	sta VIC2ScreenControlV
	sta VIC2SpriteEnable
	sta VIC2BorderColour
	sta VIC2ScreenColour
!ifdef Multiplex_LogCollisions {
!ifdef Multiplexor_UpdateCollisionDetailsSoftEnable {
	sta Multiplexor_UpdateCollisionDetailsSoftEnableFlag
}
}
	; Init music

	lda #0
	jsr MusicPlayerInit
	
	lda #%1000
	sta VIC2ScreenControlH
	lda #%11
	sta CIA2PortASerialBusVICBank

!ifdef EnableScorePanelDataHook {
	jsr BeforeScorePanelDataHook
}

	; Copy the SEUCK title screen data to the relevant places in VIC bank 0
	ldx #0
.l1
	lda TitleScreenCharData,x
	eor #$ff
	sta $0800,x
	lda TitleScreenCharData+$100,x
	eor #$ff
	sta $0900,x

	lda TitleScreenBallSprites,x
	sta $0a00,x
	lda TitleScreenBallSprites+$100,x
	sta $0b00,x

	lda #$20
	sta SCREENRAM,x
	sta SCREENRAM + $100,x
	sta SCREENRAM + $200,x
	sta SCREENRAM + $2e8,x
	dex
	bne .l1

.l2
	lda TitleScreenChars,x
	jsr .convertChar
	sta SCREENRAM + (6*40),x
	lda TitleScreenChars+$100,x
	jsr .convertChar
	sta SCREENRAM + $100 + (6*40),x
	lda TitleScreenChars+$108,x
	jsr .convertChar
	sta SCREENRAM + $108 + (6*40),x
	lda #VIC2Colour_Black
	sta COLOURRAM,x
	sta COLOURRAM + $100,x
	sta COLOURRAM + $200,x
	sta COLOURRAM + $2e8,x
	dex
	bne .l2

!ifdef EnableScorePanelDataHook {
	jsr AfterScorePanelDataHook
}

	; Display the data just copied.
	lda #%00011011
	sta VIC2ScreenControlV

	lda #%00010010
	sta VIC2MemorySetup

	; Initialise the multiplexor, animation engine and IRQs for the title screen code to use if it wants to
	; MPi: TODO: Init sprite multicolour mode and extended colours here
	lda #7
	jsr Multiplex_SetSpritePointer
	lda #Multiplex_items
	sta Multiplex_MaxSpr
	jsr Multiplex_InitSort
	jsr AnimationInit
	jsr AnimationClearMultiplexor
	lda #$ff
	sta VIC2SpriteMulticolour
	lda #VIC2Colour_White
	sta VIC2ExtraSpriteColour1
	lda #VIC2Colour_DarkGrey
	sta VIC2ExtraSpriteColour2

	ldx #Multiplex_items-1
.fl1
	txa
;	lda #VIC2Colour_Grey
	sta Multiplex_Colour,x
	lda #0
	sta Multiplex_XPosHi,x
	lda #$28	; Some sprite frame for now
	sta Multiplex_SpriteFrame,x
	lda Multiplex_YPos,x
!ifdef Multiplex_SplitSort {
	sta AnimationYPosToSort,x
}
	dex
	bpl .fl1

	jsr Multiplex_Sort
!ifdef Multiplex_SplitSort {
	jsr CopyMultiplexTables
}

	jsr SetupIRQsForTitleScreen
	; Now the loop which displays the title screen
.l3

	jsr ScrollerDemoWaitScorePanel

	jsr Joystick_Read

!ifdef Scroller_DebugMainlineBorder {
	inc VIC2BorderColour
}
!ifdef Scroller_NoMusic {} else {
	jsr MusicPlayerPlay
}
!ifdef Scroller_DebugMainlineBorder {
	inc VIC2BorderColour
}

!ifdef Scroller_DebugMainlineBorder {
	inc VIC2BorderColour
}

!ifdef Scroller_DebugMainlineBorder {
	lda #0
	sta VIC2BorderColour
}

	lda #VIC2Colour_Red
	sta VIC2ScreenColour

	; Wait for fire
	lda #%10000
	bit JoystickA_Processed
	beq .joystick0start

	jmp .l3

.joystick0start
	sei

	jsr TitleScreenWaitForOffScreenFromRaster

	+BlankScreenBorderSpriteSound_A

	lda #0
	sta TitleScreenJoystickStarted

	lda #scorePanelPos1-1
	jsr Multiplex_SetDiscardPosition

	+SetDefaultScreenLowerCase_A
	+DisplayColourTextMiddle_AX .textStart_Loading , .textEnd_Loading , SCREENRAM + (9*VIC2ScreenCharsWidth) , VIC2Colour_White

	lda #0
	jsr LoadLevel

	rts
.textStart_Loading
!scr "Loading..."
.textEnd_Loading

; Converts a character to display it on the screen
.convertChar
	and #$3f
	cmp #$30
	bcc .ret
	clc
	adc #6
.ret
	rts

TitleScreen_SpriteAnimateCount !by 0

!zn
.spriteOffset0 = 32+32+32
.spriteOffset1 = 128
.spriteOffset2 = 128+32

; Spread evenly
.spriteSpread = 17
.spritePerStroke = 12
;.spritePerStroke = 8

; Very tight packing
;.spriteSpread = 8
;.spritePerStroke = 12
.xposTweak = 24

!if Multiplex_items < (.spritePerStroke * 2) {
!error "Not enough Multiplex_items for title screen sprite animation .spritePerStroke"
}

.upDownTab !by 0,1,2,3,4,5,6,7,7,6,5,4,3,2,1,0
TitleScreenAnimationHook
	inc TitleScreen_SpriteAnimateCount

	ldx TitleScreen_SpriteAnimateCount
	ldy #0
.l1
	; If something is already animating in this slot then continue with the animation
	lda Multiplex_YPos,y
	cmp #$ff
	bne .alreadyOn1
	; Otherwise calculate if the sprite is really small before allowing the animaton to start
	txa
	pha
	lsr
	lsr
	lsr
	lsr
	tax
	lda .upDownTab,x
	cmp #7
	bne .skipIt1
	pla
	tax
.alreadyOn1
	lda TitleScreen_SinTab,x
	sta Multiplex_YPos,y
!ifdef Multiplex_SplitSort {
	sta AnimationYPosToSort,y
}
	txa
	pha
	lsr
	lsr
	lsr
	lsr
	tax
	lda .upDownTab,x
	clc
	adc #$28
	sta Multiplex_SpriteFrame,y
.skipIt1
	pla
	clc
	adc #.spriteSpread
	tax
	iny
	cpy #.spritePerStroke
	bne .l1

	lda TitleScreen_SpriteAnimateCount
	clc
	adc #.spriteOffset0
	tax
	ldy #0
.l2
	lda TitleScreen_SinTab,x
	clc
	adc #.xposTweak
	sta Multiplex_XPosLo,y
	txa
	clc
	adc #.spriteSpread
	tax
	iny
	cpy #.spritePerStroke
	bne .l2

!if 1 {
	lda TitleScreen_SpriteAnimateCount
	clc
	adc #.spriteOffset1
	tax
	ldy #0
.l3
	; If something is already animating in this slot then continue with the animation
	lda Multiplex_YPos+16,y
	cmp #$ff
	bne .alreadyOn2
	; Otherwise calculate if the sprite is really small before allowing the animaton to start
	txa
	pha
	lsr
	lsr
	lsr
	lsr
	tax
	lda .upDownTab,x
	cmp #7
	bne .skipIt2
	pla
	tax
.alreadyOn2
	lda TitleScreen_SinTab,x
	sta Multiplex_YPos+16,y
!ifdef Multiplex_SplitSort {
	sta AnimationYPosToSort+16,y
}
	txa
	pha
	lsr
	lsr
	lsr
	lsr
	tax
	lda .upDownTab,x
	clc
	adc #$28
	sta Multiplex_SpriteFrame+16,y
.skipIt2
	pla
	clc
	adc #.spriteSpread
	tax
	iny
	cpy #.spritePerStroke
	bne .l3

	lda TitleScreen_SpriteAnimateCount
	clc
	adc #.spriteOffset2
	tax
	ldy #0
.l4
	lda TitleScreen_SinTab,x
	clc
	adc #.xposTweak
	sta Multiplex_XPosLo+16,y
	txa
	clc
	adc #.spriteSpread
	tax
	iny
	cpy #.spritePerStroke
	bne .l4
}

	; After this function returns the mutiplexor will sort the sprites and display them
	rts

TitleScreenJoystickStarted !by 0

!zn
; This should be used with the IRQs disabled to stop any IRQ from using that screen raster time.
; For example:
; Wait for the raster so that turning off the screen is done with a clean effect rather than
; producing a couple of lines of rubbish data.
TitleScreenWaitForOffScreenFromRaster
	lda #$ff
.l2
	cmp VIC2Raster
	bne .l2	
	rts

TitleScreen_SinTab
 !by $8d,$8f,$92,$94,$96,$98,$9a,$9c,$9f,$a1,$a3,$a5,$a7,$a9,$ab,$ad
 !by $af,$b1,$b3,$b5,$b7,$b9,$bb,$bc,$be,$c0,$c2,$c3,$c5,$c7,$c8,$ca
 !by $cb,$cd,$ce,$d0,$d1,$d2,$d4,$d5,$d6,$d7,$d8,$d9,$da,$db,$dc,$dd
 !by $de,$df,$e0,$e0,$e1,$e1,$e2,$e2,$e3,$e3,$e3,$e4,$e4,$e4,$e4,$e4
 !by $e4,$e4,$e4,$e4,$e3,$e3,$e3,$e2,$e2,$e1,$e1,$e0,$e0,$df,$de,$dd
 !by $dc,$db,$da,$d9,$d8,$d7,$d6,$d5,$d4,$d2,$d1,$d0,$ce,$cd,$cb,$ca
 !by $c8,$c7,$c5,$c3,$c2,$c0,$be,$bc,$bb,$b9,$b7,$b5,$b3,$b1,$af,$ad
 !by $ab,$a9,$a7,$a5,$a3,$a1,$9f,$9c,$9a,$98,$96,$94,$92,$8f,$8d,$8b
 !by $89,$87,$84,$82,$80,$7e,$7c,$7a,$77,$75,$73,$71,$6f,$6d,$6b,$69
 !by $67,$65,$63,$61,$5f,$5d,$5b,$5a,$58,$56,$54,$53,$51,$4f,$4e,$4c
 !by $4b,$49,$48,$46,$45,$44,$42,$41,$40,$3f,$3e,$3d,$3c,$3b,$3a,$39
 !by $38,$37,$36,$36,$35,$35,$34,$34,$33,$33,$33,$32,$32,$32,$32,$32
 !by $32,$32,$32,$32,$33,$33,$33,$34,$34,$35,$35,$36,$36,$37,$38,$39
 !by $3a,$3b,$3c,$3d,$3e,$3f,$40,$41,$42,$44,$45,$46,$48,$49,$4b,$4c
 !by $4e,$4f,$51,$53,$54,$56,$58,$5a,$5b,$5d,$5f,$61,$63,$65,$67,$69
 !by $6b,$6d,$6f,$71,$73,$75,$77,$7a,$7c,$7e,$80,$82,$84,$87,$89,$8b
