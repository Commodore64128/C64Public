; Free space since the screen used for the status bar doesn't render anything up at the top of the screen
; No maze calculation results when the sub-game is active
TraceBackResultBuffer	= $c00 + VIC2ScreenCharsWidth
BackupAnimationMem		= TraceBackResultBuffer + 192

DynamicMemoryData = $9800
DynamicMemorySize = $400
* = DynamicMemoryData
!fill DynamicMemorySize , ' '

; Temporary calculation area for the maze screen before routing starts
; Also later calculated to be the zone lookup map
Maze = *
ZoneMap = Maze
; #			Wall
; <space>	Open area
; <Number>	Move cost/aversion
!fill (MazeWidth*MazeHeight) , ' '
MazeEnd = *

* = $8000
MarkBeginData = *
; Data that doesn't need to be accessed between levels

; MazeSolve.a MazeNodes goes here
MazeNodes
!fill (MazeWidth* MazeHeight * Node__size) , 0

; An index back into the enemy DB. A zero index indicates this is not an enemy DB slot, but it might be a simple on-screen animation instead
Animation_StartMem = *
AnimationActiveSlot			!fill Multiplex_items , 0
AnimationXPosLo				!fill Multiplex_items
AnimationXPosHi				!fill Multiplex_items
AnimationYPos				!fill Multiplex_items
!ifdef Multiplex_SplitSort {
AnimationYPosToSort			!fill Multiplex_items
}
AnimationSpriteColour		!fill Multiplex_items
AnimationSpriteFrame		!fill Multiplex_items
AnimationAddrLo				!fill Multiplex_items
AnimationAddrHi				!fill Multiplex_items
AnimationSpriteFrameCount	!fill Multiplex_items
AnimationNumFrames			!fill Multiplex_items
AnimationSpeed				!fill Multiplex_items
AnimationSpeedReset			!fill Multiplex_items
AnimationFlags				!fill Multiplex_items
AnimationSimpleMoveX		!fill Multiplex_items
AnimationSimpleMoveY		!fill Multiplex_items
AnimationParam1				!fill Multiplex_items , 0
Animation_EndMem = *
Animation_MemSize = Animation_EndMem - Animation_StartMem

!if (BackupAnimationMem + Animation_MemSize) > ($0c00+20*40) { !error "Animation backup overwrites important data in ghost screen" }

SpriteFixedColours
!bin "LevelSprites.spd" , 2 , $7

ScorePanelBGCol0
!bin "ScorePanel.ctm" , 1 , 4
ScorePanelBGCol1
!bin "ScorePanel.ctm" , 1 , 5
ScorePanelBGCol2
!bin "ScorePanel.ctm" , 1 , 6

; The end of the data files in memory
MarkEndData = *


; From here this point is decompressed level data that can be updated between levels
; Reserve empty space for level data

*=LevelDataStart
!fill $1000
;!bin "DataLevel1.prg" ,, 2
!source "DataAutoDefs.a"



* = MusicPlayerInit
!bin "MusicAndSFX.prg",,$2	; Remember to skip any lo/hi file information by using $2





; VIC Graphics data
*=$c000
CharData
!bin "Level1.ctm" , $800 , $14

MaxSpriteNumber = 187

*=$d000
SpriteData
!bin "LevelSprites.spd" , MaxSpriteNumber*64 , $9

SpriteEmptyLookupTab		!fill 256 , 0
!ifdef SpriteEmptyLookupTab2Enable {
SpriteEmptyLookupTab2		!fill 256 , 0
}
