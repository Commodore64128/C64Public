EnemyTemplate_SpawnListCount		!by 0
EnemyFlags_SpawnListCount	!by 0

PlayerSweep_Init
	lda #0
	sta EnemyTemplate_SpawnListCount
	sta EnemyTemplate_SpawnListCount
	rts

!macro PlayerSweep_Common .lsweepCount , .lMaxSweepSteps , .lSweepPosX , .lSweepPosY {
	ldy .lsweepCount
	iny
	cpy #.lMaxSweepSteps
	bne .o1
	ldy #0
.o1
	sty .lsweepCount


	lda EnemyPositionsY
	clc
	adc .lSweepPosY,y
	cmp #MazeHeight
	bcc .onScreen1
	rts
.onScreen1
	tax

	lda EnemyPositionsX
	clc
	adc .lSweepPosX,y
	cmp #MazeWidth
	bcc .onScreen2
	rts
.onScreen2
	tay

	lda MapTabL,x
	sta tempWork0
	lda MapTabH,x
	sta tempWork1

	lda (tempWork0),y
}

!zn {
.sweepCount !by 0
; This progressively sweeps around the player and looks for closed generators, these are then animated opened using the map tile animation system
; ..0..
; .123.
; 45678
; .9ab.
; ..c..
.sweepPosX	!by          0
			!by     -1,  0,  1
			!by -2, -1,  0,  1,  2
			!by     -1,  0,  1
			!by          0
.maxSweepSteps = *-.sweepPosX

.sweepPosY	!by         -2
			!by     -1, -1, -1
			!by  0,  0,  0,  0,  0
			!by      1,  1,  1
			!by          2



PlayerSweep_MapClosedGenerators

	+PlayerSweep_Common .sweepCount , .maxSweepSteps , .sweepPosX , .sweepPosY

	cmp #MapTile_GeneratorClosed
	beq .isGenerator
	rts

.isGenerator
	sty tempWork0
	stx tempWork1

	lda #0
	ldx tempWork0
	ldy tempWork1
	jsr MapAnimations_Allocate

	lda #2
	jsr EnemyAddPlayerAggression

	lda #$a
	jsr SFXInit

	rts

}



!zn {
.sweepCount !by 0
; This progressively sweeps around the player and looks for open generators and then tries to spawn an enemy
.sweepPosX	!by             -1,  0,  1
			!by         -2, -1,  0,  1,  2
			!by     -3, -2, -1,  0,  1,  2,  3
			!by -4, -3, -2, -1,  0,  1,  2,  3,  4
			!by     -3, -2, -1,  0,  1,  2,  3
			!by         -2, -1,  0,  1,  2
			!by             -1,  0,  1
.maxSweepSteps = *-.sweepPosX

.sweepPosY	!by             -3, -3, -3
			!by         -2, -2, -2, -2, -2
			!by     -1, -1, -1, -1, -1, -1, -1
			!by  0,  0,  0,  0,  0,  0,  0,  0,  0
			!by      1,  1,  1,  1,  1,  1,  1
			!by          2,  2,  2,  2,  2
			!by              3,  3,  3



PlayerSweep_MapOpenGenerators

	+PlayerSweep_Common .sweepCount , .maxSweepSteps , .sweepPosX , .sweepPosY

	cmp #MapTile_GeneratorOpen1
	beq .isGenerator
	cmp #MapTile_GeneratorOpen2
	beq .isGenerator
	cmp #MapTile_GeneratorOpen3
	beq .isGenerator
	cmp #MapTile_GeneratorOpen4
	beq .isGenerator
	rts

.isGenerator
	sty tempWork0
	stx tempWork1

	ldy tempWork0
	ldx tempWork1
	; Check the target zone to the player using the cached router information
	lda ZoneMapTabL,x
	sta tempWork2
	lda ZoneMapTabH,x
	sta tempWork3
	lda (tempWork2),y
	bpl .gotGeneratorZone
	rts

.gotGeneratorZone
	sta tempWork4

	; Get the player zone
	ldx EnemyPositionsY
	lda ZoneMapTabL,x
	sta tempWork2
	lda ZoneMapTabH,x
	sta tempWork3
	ldy EnemyPositionsX
	lda (tempWork2),y
	bpl .gotPlayerZone
	rts

.gotPlayerZone
	cmp tempWork4
	beq .playerCanBeRouted
	jsr CalculateConnectedZones

	lda tempWork4
	!for .i , ZoneMapLinked_Max {
		cmp ZoneMapLinked-1+.i
		beq .playerCanBeRouted
	}
	rts

.playerCanBeRouted
	ldx tempWork0
	ldy tempWork1

	; Is the map square blocked already?
	jsr GetMazeNodesIndex
	sta tempWork2
	stx tempWork3
	ldy #Node_isBlocked
	lda (tempWork2),y
	beq .noBlocked

	rts
.noBlocked
	; Find a free slot in the enemy DB
	ldx #1	; Skip the player
.l1
	lda EnemyType,x
	bmi .found
	inx
	cpx #numMaxEnemySlotsToOnScreenCheck
	bne .l1
	rts

.found
	; Mark the map tile as blocked until the enemy spawns using the on screen check
	lda (tempWork2),y
	ora #Node_isBlocked_Enemy
	sta (tempWork2),y

	; Allocate an enemy in the enemy DB at the open generator square
	inc EnemyTemplate_SpawnListCount
	lda EnemyTemplate_SpawnListCount
	cmp #EnemyTemplate_MaxSpawnList
	bcc .doSpawn
	lda #0
	sta EnemyTemplate_SpawnListCount
.doSpawn
	tay
	lda EnemyTemplate_SpawnList,y
	sta EnemyType,x
	tay
	lda EnemyTemplate_Health,y
	sta EnemyHealth,x

	lda #$ff
	sta EnemyToAnimationIndex,x

	lda tempWork0
	sta EnemyPositionsX,x
	lda tempWork1
	sta EnemyPositionsY,x

	lda #0
	sta EnemyBlockedCount,x
	sta EnemyMoveStepsLo,x
	sta EnemyMoveStepsHi,x
	sta EnemyMoveGotMovement,x
	sta EnemyMoveStepsCount,x
	sta EnemyPreviousSolveRequestX,x
	sta EnemyPreviousSolveRequestY,x

	; Adjust spawned EnemyFlags based on chance
	inc EnemyFlags_SpawnListCount
	lda EnemyFlags_SpawnListCount
	cmp #EnemyFlags_MaxSpawnList
	bcc .doCheck
	lda #0
	sta EnemyFlags_SpawnListCount
.doCheck
	tay
	lda EnemyFlags_SpawnList,y

	sta EnemyFlags,x

	rts

}
