
!ct pet

!macro Add8STo16S .val1 , .val2Lo , .val2Hi {
	ldy #0	; Sign of .val1
	lda .val1
	bpl .pos
	dey	; Now neg sign
.pos
	clc
	adc .val2Lo
	sta .val2Lo
	tya
	adc .val2Hi
	sta .val2Hi
}

!zn
Animation_MapPosXLo !by <-(VIC2SpriteXBorderLeft38-7)
Animation_MapPosXHi !by >-(VIC2SpriteXBorderLeft38-7)
Animation_MapPosYLo !by <-(VIC2SpriteYBorderTop24-7)
Animation_MapPosYHi !by >-(VIC2SpriteYBorderTop24-7)

scrollerRealMovementXPixelsNeg !by 0
scrollerRealMovementYPixelsNeg !by 0
.alternateFrames !by 0
!ifdef DebugEnemyBullet {
.doDebugEnemyBullets !by 1
}
!ifdef DebugPickup {
.doDebugPickups !by 1
}

UpdateSprites
	lda EnemyBulletBusy
	beq .nb1
	dec EnemyBulletBusy
.nb1

!ifdef DebugEnemyBullet {
	lda .doDebugEnemyBullets
	beq .skipDebug
	dec .doDebugEnemyBullets
	jsr AnimationFindFreeSlot
	ldy #6
	jsr AnimationInitWithType
	lda #0
	sta AnimationXPosHi,x
	lda #124
	sta AnimationXPosLo,x
	lda #150
	sta AnimationYPos,x
.skipDebug
}

!ifdef DebugPickup {
	lda .doDebugPickups
	beq .skipDebug2
	dec .doDebugPickups
	jsr AnimationFindFreeSlot
	ldy #7
	jsr AnimationInitWithType
	lda #0
	sta AnimationXPosHi,x
	lda #170
	sta AnimationXPosLo,x
	lda #150
	sta AnimationYPos,x
.skipDebug2
}

	lda .smAlternateFrames+1
	eor #1
	sta .smAlternateFrames+1

	lda #0
	sec
	sbc scrollerRealMovementXPixels
	sta scrollerRealMovementXPixelsNeg
	lda #0
	sec
	sbc scrollerRealMovementYPixels
	sta scrollerRealMovementYPixelsNeg

	+Add8STo16S scrollerRealMovementXPixelsNeg , Animation_MapPosXLo , Animation_MapPosXHi
	+Add8STo16S scrollerRealMovementYPixelsNeg , Animation_MapPosYLo , Animation_MapPosYHi

	; Update sprites here from the frame data. i.e. Copy them from the frame data to the interrupt data
	; MPi: TODO: Optimisation. Don't copy the sprite data have double buffered sprite data. One for calc, one for draw.
	ldx Multiplex_MaxSpr
	dex
.sp1
	lda AnimationActiveSlot,x
	beq .simpleUpdateSpriteCheck

	tay	; Index into the enemy map

	jsr AnimationDoFineUpdates

	; Calculate the on screen positions based on the total map scroll
	; Also perform screen border checks
	lda EnemyPositionsXLo-1,y
	sec
	sbc Animation_MapPosXLo
	sta AnimationXPosLo,x
	lda EnemyPositionsXHi-1,y
	sbc Animation_MapPosXHi
	bmi .offScreenDB	; Off screen
	sta AnimationXPosHi,x
	beq .o1
	cmp #1
	bne .offScreenDB	; Way off screen
	lda AnimationXPosLo,x
	cmp #<VIC2SpriteXBorderRight
	bcs .offScreenDB	; Also off screen
.o1
	lda EnemyPositionsYLo-1,y
	sec
	sbc Animation_MapPosYLo
	sta AnimationYPos,x
	lda EnemyPositionsYHi-1,y
	sbc Animation_MapPosYHi
	bne .offScreenDB	; Also off screen

	lda AnimationYPos,x
	cmp #VIC2SpriteYBorderTop-VIC2SpriteSizeY
	bcc .offScreenDB
	cmp #scorePanelPos1
	bcs .offScreenDB

	cpy #1	; Is it the player slot?
	beq .skipEnemyBulletTest

	; Alternate the bullet test for each sprite based on its enemy DB index
	tya
	and #1
.smAlternateFrames	cmp #0
	beq .skipEnemyBulletTest
	jmp .enemyHitBulletTest


.skipEnemyBulletTest
	jsr AnimationCommonUpdate

	dex
	bpl .sp1

	rts

.offScreenDB

.offScreenClearY
	lda #$ff
	sta AnimationYPos,x

.offScreen2
	dex
	bpl .sp1

	rts

.simpleUpdateSpriteCheck

	lda AnimationYPos,x
	cmp #$ff
	beq .offScreen2

	lda AnimationFlags,x
	and #AnimationFlags_PlayerCollideS
	beq .noPlayerSCollide

.testEnemyBulletToPlayerCollide
	lda AnimationYPos
	clc
	adc #8
	sec
	sbc AnimationYPos,x
	cmp #16
	bcs .noPlayerSCollide

	lda AnimationXPosHi,x
	lsr
	lda AnimationXPosLo,x
	ror
	sta .smpp+1

	lda AnimationXPosHi
	lsr
	lda AnimationXPosLo
	ror
	clc
	adc #5
	sta tempWork0
	sec
.smpp	sbc #0
	cmp #10
	bcs .noPlayerSCollide

	lda AnimationFlags,x
	and #AnimationFlags_Pickup
	bne .isPickup

	; When an enemy bullet hits the player this makes other enemies more alert, kind of like wasps :)
	lda #20
	jsr EnemyAddPlayerAggression

	lda #1
	jsr AnimationHitPlayerLogic
	
	jmp .removeBullet
.isPickup
	jmp .removePickup

.noPlayerSCollide


	lda AnimationFlags,x
	and #AnimationFlags_PlayerCollideL
	beq .noPlayerLCollide

.testPickupToPlayerCollide
	lda AnimationYPos
	clc
	adc #15
	sec
	sbc AnimationYPos,x
	cmp #32
	bcs .noPlayerLCollide

	lda AnimationXPosHi,x
	lsr
	lda AnimationXPosLo,x
	ror
	sta .smpp2+1

	lda AnimationXPosHi
	lsr
	lda AnimationXPosLo
	ror
	clc
	adc #9
	sta tempWork0
	sec
.smpp2	sbc #0
	cmp #20
	bcs .noPlayerLCollide

	lda AnimationFlags,x
	and #AnimationFlags_Pickup
	bne .isPickup

	; Just remove since we don't know what it is
	lda #$ff
	sta AnimationYPos,x
	lda #0
	sta AnimationActiveSlot,x

	jmp .nextAnimation

.isPickup2
	jmp .removePickup

.noPlayerLCollide


	lda AnimationFlags,x
	and #AnimationFlags_CharCollide
	beq .noCharCollide

	; Checks for animated sprites hitting solid character blocks
	lda AnimationYPos,x
	sec
	sbc topScreenScrollY
	tay
	lda EnemySpriteYPosToScreenCharPos,y
	bmi .noCharCollide
	tay
	lda ScreenTabL,y
	sta tempWork0
	lda ScreenTabH,y
	clc
	adc CurrentBulletBank
	sta tempWork1

	lda topScreenScrollX
	lsr
	sta tempWork2
	lda AnimationXPosHi,x
	lsr
	lda AnimationXPosLo,x
	ror
	sec
	sbc tempWork2
	tay
	lda EnemySpriteXPosToScreenCharPos,y
	bmi .noCharCollide
	tay
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y

	cmp #MapWallChars
	bcc .noCharCollide

	lda AnimationFlags,x
	and #AnimationFlags_Pickup
	bne .isPickup2

.removeBullet
	; Mutate to the explosion type
	ldy #9
	jsr AnimationMutateToType

	lda #2
	jsr SFXInit

.noCharCollide

	; Update and check Y pos offscreen
	lda AnimationYPos,x
	clc
	adc scrollerRealMovementYPixels
	clc
	adc AnimationSimpleMoveY,x

	cmp #VIC2SpriteYBorderTop-VIC2SpriteSizeY
	bcc .loffScreenClearY
	cmp #scorePanelPos1
	bcs .loffScreenClearY

	sta AnimationYPos,x

	; Update and check X pos offscreen
	lda scrollerRealMovementXPixels
	clc
	adc AnimationSimpleMoveX,x
	beq .noXMove
	bpl .posXMove

	clc
	adc AnimationXPosLo,x
	sta AnimationXPosLo,x

	lda AnimationXPosHi,x
	sbc #0
	and #1
	sta AnimationXPosHi,x
	beq .on
	jmp .offCheckX

.posXMove
	clc
	adc AnimationXPosLo,x
	sta AnimationXPosLo,x
	lda AnimationXPosHi,x
	adc #0
	and #1
	sta AnimationXPosHi,x
	beq .on
.offCheckX
	lda AnimationXPosLo,x
	cmp #<VIC2SpriteXBorderRight
	bcs .loffScreenClearY

.noXMove
.on
	jsr AnimationCommonUpdate

.nextAnimation
	dex
	bpl .lsp1

	rts
.lsp1 jmp .sp1
.loffScreenClearY jmp .offScreenClearY

.lenemyFire jmp .enemyFire
.lskipEnemyBulletTest jmp .skipEnemyBulletTest

.removePickup
	; Store the colour, which is the type of the item picked up
	lda AnimationSpriteColour,x
	jsr PlayerInventory_Add

	lda #$ff
	sta AnimationYPos,x
	lda #0
	sta AnimationActiveSlot,x

	lda #9
	jsr SFXInit

	jmp .nextAnimation


.enemyHitBulletTest
	; Useful place to update enemy firing
	inc AnimationParam1,x
	lda AnimationParam1,x
	cmp #100
	bcs .lenemyFire

.enemyFireRet
;	jmp .skipEnemyBulletTest

	lda AnimationYPos,x
	sec
	sbc topScreenScrollY
	tay
	lda EnemySpriteYPosToScreenCharPos,y
	bmi .lskipEnemyBulletTest
	tay
	lda ScreenTabL,y
	sta tempWork0
	lda ScreenTabH,y
	clc
	adc CurrentBulletBank
	sta tempWork1

	lda topScreenScrollX
	lsr
	sta tempWork2
	lda AnimationXPosHi,x
	lsr
	lda AnimationXPosLo,x
	ror
	sec
	sbc tempWork2
	tay
	lda EnemySpriteXPosToScreenCharPos,y
	bmi .lskipEnemyBulletTest
	tay

	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #16
	bcc .itHitEnemy
	dey
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #16
	bcc .itHitEnemy
	iny
	iny
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #16
	bcc .itHitEnemy
	iny
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #16
	bcc .itHitEnemy
	tya
	sec
	sbc #42
	tay
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #16
	bcc .itHitEnemy
	iny
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #16
	bcc .itHitEnemy
	tya
	clc
	adc #80
	tay
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #16
	bcc .itHitEnemy
	dey
	lda (tempWork0),y
;	adc #1
;	sta (tempWork0),y
	cmp #16
	bcc .itHitEnemy


.testEnemyToPlayerCollide
	lda AnimationYPos
	clc
	adc #20
	sec
	sbc AnimationYPos,x
	cmp #40
	bcs .noPlayerSCollide2

	lda AnimationXPosHi,x
	lsr
	lda AnimationXPosLo,x
	ror
	sta .smpp3+1

	lda AnimationXPosHi
	lsr
	lda AnimationXPosLo
	ror
	clc
	adc #11
	sta tempWork0
	sec
.smpp3	sbc #0
	cmp #22
	bcs .noPlayerSCollide2

	lda #2
	jsr AnimationHitPlayerLogic

	jmp .enemyHitByPlayer	

.doFlashOnly
	lda AnimationSpriteColour,x
	bmi .noPlayerSCollide2
	; Flash it
	eor #$ff
	sta AnimationSpriteColour,x

.noPlayerSCollide2

	jmp .skipEnemyBulletTest


.itHitEnemy
;	jmp .skipEnemyBulletTest

	; Remove the bullet next frame
	; The bullet char number is the index into PlayerBulletsY
	and #kNumPlayerBullets-1
	tay
	lda #100
	sta PlayerBulletsY,y

.enemyHitByPlayer
	lda AnimationActiveSlot,x
	tay

	; Enemy was hit, so make it stop and re-calculate its route by faking that it is blocked, if the player aggression is less than its alertness.
	lda Enemy_PlayerAggression
	cmp EnemyAlertness-1,y
	bcs .ljustPatrol
	lda #MaxEnemyBlockedCount+32
	sta EnemyBlockedCount-1,y
.ljustPatrol

	lda #20
	jsr EnemyAddPlayerAggression

	; Enemy health test
	lda EnemyHealth-1,y
	sec
	sbc #1
	sta EnemyHealth-1,y
	bpl .doFlashOnly

	; Now remove the enemy by switching to the explosion
	lda #20
	jsr EnemyAddPlayerAggression

	lda #0
	sta AnimationActiveSlot,x
	sta AnimationSpriteFrameCount,x
	lda #-1
	sta EnemyType-1,y

	; Check the enemy is not currently requesting a route and abort if necessary
	lda WantMazeSolveState
	cmp #WantMazeSolve_Idle
	beq .notRouting
	cpy WantMazeSolveForEnemyDBIndex
	bne .notRouting

	; Abort the route
	lda #WantMazeSolve_Idle
	sta WantMazeSolveState

.notRouting

	; Free any allocated enemy block
	stx tempWork0
	sty tempWork1

	lda EnemyMoveStepsOriginalLo-1,y
	ldx EnemyMoveStepsOriginalHi-1,y
	beq .o2
	jsr DynamicMemory_FreeBytes
.o2
	ldx tempWork0
	ldy tempWork1

	; Really set the memory is freed
	lda #0
	sta EnemyMoveStepsOriginalHi-1,y

	; Add aversion to the place where the enemy exploded
	ldx EnemyPositionsX-1,y
	lda EnemyPositionsY-1,y
	tay
	jsr GetMazeNodesIndex
	sta tempWork2
	stx tempWork3
	ldy #Node_aversion
	lda (tempWork2),y
	clc
	adc #1
	sta (tempWork2),y

	ldy #Node_isBlocked
	lda (tempWork2),y
	and #!Node_isBlocked_Enemy
	sta (tempWork2),y

	ldx tempWork0
	ldy tempWork1

	ldy #4	; Explosion type
	jsr AnimationMutateToType

	lda #5
	jsr SFXInit

	; Pickup chance test
	jsr Rand
	cmp #PickupDropChance
	bcc .noDrop
	jsr SpawnPickup
.noDrop
	jmp .skipEnemyBulletTest

.lnoBulletSpawned jmp .noBulletSpawned

!zn {
SpawnPickup
	stx tempWork5

	; Spawn pickup
	lda AnimationXPosLo,x
	sta tempWork2
	lda AnimationXPosHi,x
	sta tempWork3
	lda AnimationYPos,x
	sta tempWork4

	jsr AnimationFindFreeSlot
	bcs .noFreeSlot

	ldy #7
	jsr AnimationInitWithType

	lda tempWork2
	sta AnimationXPosLo,x
	lda tempWork3
	sta AnimationXPosHi,x
	lda tempWork4
	sta AnimationYPos,x

	; Random colour
	jsr Rand
	and #7
	clc
	adc #1
	sta AnimationSpriteColour,x


.noFreeSlot
	ldx tempWork5

	rts
}

EnemyBulletBusy !by 0

.lenemyFireRet jmp .enemyFireRet
.enemyFire
	lda #0
	sta AnimationParam1,x

	; Check if the game isn't too busy to accept new enemy bullets
	lda EnemyBulletBusy
	cmp #50
	bcs .lenemyFireRet

	txa
	pha
	lda AnimationXPosLo,x
	sta tempWork2
	lda AnimationXPosHi,x
	sta tempWork3
	lda AnimationYPos,x
	sta tempWork4
	lda AnimationSpriteColour,x
	sta tempWork5

	jsr AnimationFindFreeSlot
	bcs .lnoBulletSpawned

	ldy #6
	jsr AnimationInitWithType

	lda tempWork2
	sta AnimationXPosLo,x
	lda tempWork3
	sta AnimationXPosHi,x
	lda tempWork4
	sta AnimationYPos,x
	lda tempWork5
	sta AnimationSpriteColour,x

	inc .randomCount
	ldy .randomCount
	lda .randomTab,y
	and #7
	jsr .doBulletSpeedCalc
	lda .randomTab,y
	bmi .noBulletSpawned
	and #7
	jsr .doBulletSpeedCalc

	lda #6
	jsr SFXInit

	; Update the busy counter
	lda EnemyBulletBusy
	clc
	adc #30
	sta EnemyBulletBusy

.noBulletSpawned
	pla
	tax

	jmp .enemyFireRet

.doBulletSpeedCalc
	cmp #0
	bne .of1
	inc AnimationSimpleMoveX,x
	rts
.of1
	cmp #1
	bne .of2
	inc AnimationSimpleMoveX,x
	inc AnimationSimpleMoveY,x
	rts
.of2
	cmp #2
	bne .of3
	inc AnimationSimpleMoveY,x
	rts
.of3
	cmp #3
	bne .of4
	inc AnimationSimpleMoveY,x
	dec AnimationSimpleMoveX,x
	rts
.of4
	cmp #4
	bne .of5
	dec AnimationSimpleMoveX,x
	rts
.of5
	cmp #5
	bne .of6
	dec AnimationSimpleMoveX,x
	dec AnimationSimpleMoveY,x
	rts
.of6
	cmp #6
	bne .of7
	dec AnimationSimpleMoveY,x
	rts
.of7
;	cmp #7
;	beq .of8
	inc AnimationSimpleMoveX,x
	dec AnimationSimpleMoveY,x
.of8
	rts

AnimationDoFineUpdates
	txa
	pha
	lda EnemySpeed-1,y
	and #1
	bne .notHalfSpeedToggle
	txa
	eor .smAlternateFrames+1
	and #1
	beq .noMove
.notHalfSpeedToggle
	jsr EnemyMoveFineUpdate
.noMove
	lda EnemySpeed-1,y
	and #2
	beq .notSpeed2
	jsr EnemyMoveFineUpdate
.notSpeed2
	pla
	tax
	rts

.randomCount !by 0
.randomTab
!by 2,76,151,113,22,128,247,203,214,91,130,211,134,40,251,42
!by 137,31,19,58,148,146,115,156,108,224,206,169,47,45,117,15
!by 181,64,197,185,163,171,34,42,172,16,75,20,32,229,236,171
!by 187,221,174,68,180,233,20,124,62,226,238,138,172,38,167,164
!by 150,215,6,51,200,177,171,4,221,160,199,67,203,222,38,9
!by 140,36,133,47,0,166,123,44,103,211,231,157,157,138,56,226
!by 62,32,142,90,205,152,171,58,15,28,206,62,133,171,96,122
!by 196,214,89,100,126,204,40,124,121,45,4,65,243,35,192,84
!by 128,93,150,144,110,146,74,130,247,34,195,57,130,173,68,26
!by 233,65,236,251,16,214,11,207,226,44,129,76,132,219,55,209
!by 46,167,35,181,140,49,183,100,177,240,4,51,1,212,47,241
!by 163,213,58,229,201,250,185,162,61,174,7,103,242,173,168,84
!by 111,143,206,21,178,210,161,140,211,187,48,227,203,127,13,73
!by 105,227,156,169,33,165,160,31,7,165,125,148,224,11,228,219
!by 233,74,130,203,221,148,113,84,204,187,9,240,175,31,178,89
!by 66,117,94,55,173,173,60,158,250,179,89,137,191,251,154,68

AnimationCommonUpdate

	dec AnimationSpeed,x
	bmi .doTick
	rts
.doTick
	lda AnimationSpeedReset,x
	sta AnimationSpeed,x

	; Run the animation code since they're on-screen
	inc AnimationSpriteFrameCount,x
	lda AnimationSpriteFrameCount,x
	cmp AnimationNumFrames,x
	bne .l1

	lda AnimationFlags,x
	and #AnimationFlags_DeleteAtEnd
	bne .delAnim

	lda AnimationFlags,x
	and #AnimationFlags_Cycle
	beq .noCycle

	lda #0
	sta AnimationSpriteFrameCount,x
	jmp .l1

.noCycle
	lda #127
	sta AnimationSpeed,x
	dec AnimationSpriteFrameCount,x
	; No need to update the sprite frame, use the last frame drawn instead
	rts

.l1
	clc
	adc #AnimationDefOffset_Frames
	tay
	lda AnimationAddrLo,x
	sta tempWork0
	lda AnimationAddrHi,x
	sta tempWork1
	lda (tempWork0),y
	clc
	adc #AnimationSpriteOffset
	sta AnimationSpriteFrame,x
	rts

.delAnim jmp .offScreenClearY

; Before and after these tables are -1 so we can modify the sprute lookup coordinates
!fill 24 , -1
EnemySpriteYPosToScreenCharPos
!fill VIC2SpriteYBorderTop-16 , -1
!fill 8 , 0
!for .num , 18 { !fill 8 , .num-1 }
!fill 8 , 17
!fill 256 - (* - EnemySpriteYPosToScreenCharPos) , -1
!fill 24 , -1

EnemySpriteXPosToScreenCharPos
!fill (VIC2SpriteXBorderLeft-16)/2 , -1
!fill 8/2 , 40 + 1
!for .num , 37 { !fill 8/2 , 40 + .num-1 }
!fill 8/2 , 40 + 37
!fill 8/2 , 40 + 37
!fill 256 - (* - EnemySpriteXPosToScreenCharPos) , -1
!fill 24 , -1

!zn
ScrollerPreGameCalcuation
	jsr UpdateMapToMaze
	ldx #0
	jsr MazeSolve_init
	jsr MapCreateZones
	jsr MapPlacesToZone
	rts

PlayerHealth !by 6

!zn
AnimationInit2

	lda #0
	sta Enemy_PlayerAggression
	lda #6
	sta PlayerHealth

	jsr PlayerInventory_Init
	jsr MapAnimations_Init
	jsr PlayerBullets_Init

	jsr EnemyProcessActivationInit

	jsr EnemyMapClear
	jsr AnimationClear

	lda #$ff
	sta VIC2SpriteMulticolour
	lda SpriteFixedColours
	sta VIC2ExtraSpriteColour1
	lda SpriteFixedColours+1
	sta VIC2ExtraSpriteColour2

	lda #WantMazeSolve_Idle
	sta WantMazeSolveState

	jsr DynamicMemory_Init
	jsr AnimationMapEnemyInit
	jsr AnimationEnemiesIntoMap
	jsr AnimationProcessAllActivations

	rts

!zn
.counter !by 0
AnimationProcessAllActivations
	lda #numMaxEnemySlotsToOnScreenCheck/numEnemySlotsToOnScreenCheck
	sta .counter
.l1
	jsr EnemyProcessActivation
	dec .counter
	bpl .l1
	rts

!zn
AnimationEnemiesIntoMap
	; Init enemy blocked node state into the map, to stop enemies from moving into each other at the start
	ldx #255
.l2
	cpx #1
	beq .o1	; Skip the player slot

	lda EnemyType-1,x
	bmi .o1

	lda EnemyPositionsX-1,x
	sta tempWork0
	lda EnemyPositionsY-1,x
	sta tempWork1

	txa
	pha

	ldx tempWork0
	ldy tempWork1
	jsr GetMazeNodesIndex
	sta tempWork0
	stx tempWork1
	ldy #Node_isBlocked
	lda (tempWork0),y
	ora #Node_isBlocked_Enemy
	sta (tempWork0),y

	pla
	tax

.o1
	dex
	bne .l2
	rts


!zn
AnimationClear
	ldx #Multiplex_items-1
.l1
	lda #$ff
	sta AnimationYPos,x
	lda #0
	sta AnimationActiveSlot,x
	dex
	bpl .l1
	rts


!zn
AnimationClearDynamics
	ldx #Multiplex_items-1
.l1
	ldy AnimationActiveSlot,x
	beq .isSimple

	lda #0
	sta AnimationActiveSlot,x

	lda #$ff
	sta EnemyToAnimationIndex-1,y

.isSimple
	lda #$ff
	sta AnimationYPos,x
	dex
	bpl .l1
	rts



!zn
AnimationMapEnemyInit
	lda #0
	sta scrollerRealMovementXPixelsNeg
	sta scrollerRealMovementYPixelsNeg
	sta DisplayingSubGame

	jsr ScrollerInitVariables

	; Init the screen to map boundary rectangle
	lda #<-(VIC2SpriteXBorderLeft38-7)
	sta Animation_MapPosXLo
	lda #>-(VIC2SpriteXBorderLeft38-7)
	sta Animation_MapPosXHi
	lda #<-(VIC2SpriteYBorderTop24-7)
	sta Animation_MapPosYLo
	lda #>-(VIC2SpriteYBorderTop24-7)
	sta Animation_MapPosYHi
	
	; Init player position in the enemy DB
	ldx EnemyPositionsX
	lda MapTileToFineXLo,x
	sta EnemyPositionsXLo
	lda MapTileToFineXHi,x
	sta EnemyPositionsXHi

	ldx EnemyPositionsY
	lda MapTileToFineYLo,x
	sta EnemyPositionsYLo
	lda MapTileToFineYHi,x
	sta EnemyPositionsYHi

	; Setup the camera so the player is on screen
	; Calculate a sensible scrollMapHX, scrollMapHY from EnemyPositionsX, EnemyPositionsY
	lda EnemyPositionsX
	sec
	sbc #5
	bcs .o2
	lda #0
.o2
	cmp #30
	bcc .o2b
	lda #30
.o2b
	sta scrollMapHX

	lda EnemyPositionsY
	sec
	sbc #2
	bcs .o3
	lda #0
.o3
	cmp #19
	bcc .o3b
	lda #19
.o3b
	sta scrollMapHY

	; Then adjust Animation_MapPosXLo, Animation_MapPosXHi, Animation_MapPosYLo, Animation_MapPosYHi with scrollMapHX, scrollMapHY
	ldx scrollMapHX
	beq .o4
.l3
	lda Animation_MapPosXLo
	clc
	adc #32
	sta Animation_MapPosXLo
	bcc .l4
	inc Animation_MapPosXHi
.l4
	dex
	bne .l3
.o4

	ldx scrollMapHY
	beq .o5
.l5
	lda Animation_MapPosYLo
	clc
	adc #32
	sta Animation_MapPosYLo
	bcc .l6
	inc Animation_MapPosYHi
.l6
	dex
	bne .l5
.o5
	rts



!zn
; Finds a free slot and X contains the index with carry clear. If no index is free then carry is set.
; Exit
; A		Updated
; X		Updated
; CS	No slot
; CC	Slot found, index in X
AnimationFindFreeSlot
	ldx #0
.l1
	lda AnimationActiveSlot,x
	bne .notFree
	lda AnimationYPos,x
	cmp #$ff
	bne .notFree

	; Free slot!
	clc
	rts

.notFree
	inx
	cpx #Multiplex_items
	bne .l1

	; All used!
	sec
	rts

!zn
; Initialises an animation index with a type
; Entry
; X		Animation index
; Y		Animation type
; Exit
; A		Updated
; Y		Updated
; X		Preserved
; tempWork0/tempWork1	Updated
AnimationInitWithType
	lda #0
	sta AnimationSpriteFrameCount,x
	sta AnimationSimpleMoveX,x
	sta AnimationSimpleMoveY,x

	lda AnimationTypeTableLo,y
	sta tempWork0
	sta AnimationAddrLo,x
	lda AnimationTypeTableHi,y
	sta tempWork1
	sta AnimationAddrHi,x
	ldy #AnimationDefOffset_Colour
	lda (tempWork0),y
	sta AnimationSpriteColour,x
	ldy #AnimationDefOffset_Frames
	lda (tempWork0),y
	clc
	adc #AnimationSpriteOffset
	sta AnimationSpriteFrame,x

	ldy #AnimationDefOffset_NumFrames
	lda (tempWork0),y
	sta AnimationNumFrames,x

	ldy #AnimationDefOffset_Flags
	lda (tempWork0),y
	sta AnimationFlags,x

	ldy #AnimationDefOffset_Speed
	lda (tempWork0),y
	sta AnimationSpeed,x
	sta AnimationSpeedReset,x
	rts



!zn
; Mutates an existing animation index to a new type
; Entry
; X		Animation index
; Y		Animation type
; Exit
; A		Updated
; Y		Updated
; X		Preserved
; tempWork0/tempWork1	Updated
AnimationMutateToType
	lda AnimationTypeTableLo,y
	sta AnimationAddrLo,x
	sta tempWork0
	lda AnimationTypeTableHi,y
	sta AnimationAddrHi,x
	sta tempWork1

	; Setup animation flags
	ldy #AnimationDefOffset_NumFrames
	lda (tempWork0),y
	sta AnimationNumFrames,x

	ldy #AnimationDefOffset_Flags
	lda (tempWork0),y
	sta AnimationFlags,x

	ldy #AnimationDefOffset_Speed
	lda (tempWork0),y
	sta AnimationSpeed,x
	sta AnimationSpeedReset,x
	rts

!zn
; Entry:
; A = Amount of energy to subtract from the player
; Exit
; A/Y = Trashed
; X = Preserved
AnimationHitPlayerLogic
!ifdef RedirectHandleUserInput {} else {
	rts
}
	sta .sm1+1

	txa
	pha

	lda PlayerHealth
	sec
.sm1	sbc #0
	bpl .notNeg

	; Kill the player
	; Use this explosion type so that the player animation slot isn't freed and then used by an enemy during the player death
	ldy #12
	ldx #0
	jsr AnimationMutateToType
	lda #5
	jsr SFXInit

	jsr AnimationFindFreeSlot
	bcs .noSlot1
	ldy #10
	jsr AnimationInitWithType

	lda AnimationXPosLo
	sta AnimationXPosLo,x
	lda AnimationXPosHi
	sta AnimationXPosHi,x
	lda AnimationYPos
	sta AnimationYPos,x
	lda AnimationSpriteColour
	sta AnimationSpriteColour,x
	lda #-1
	sta AnimationSimpleMoveY,x
.noSlot1

	jsr AnimationFindFreeSlot
	bcs .noSlot2
	ldy #11
	jsr AnimationInitWithType

	lda AnimationXPosLo
	sta AnimationXPosLo,x
	lda AnimationXPosHi
	sta AnimationXPosHi,x
	lda AnimationYPos
	sta AnimationYPos,x
	lda AnimationSpriteColour
	sta AnimationSpriteColour,x
	lda #1
	sta AnimationSimpleMoveY,x
.noSlot2

	lda #75
	sta ScrollerExitMainLineCounter

	lda #0
.notNeg
	sta PlayerHealth

	lda #0
	ldx #6
.l1
	cpx PlayerHealth
	beq .l2
	dex
	sta SCREENRAM + (22*VIC2ScreenCharsWidth)+13 , x
	jmp .l1
	
.l2

	pla
	tax
	rts
