; Contains common joystick routines designed to aid in test automation
!zn

JoystickA_Raw			!by $ff
JoystickA_Processed		!by $ff
JoystickB_Raw			!by $ff
JoystickB_Processed		!by $ff

!macro Joystick_CommonRead .raw , .processed {
	sta .raw
	sta .processed

	; If two opposing directions are input then ignore both
	and #JoystickBits_Up | JoystickBits_Down
	bne .notIllegalVertical
	lda .processed
	ora #JoystickBits_Up | JoystickBits_Down
	sta .processed
;	inc VIC2BorderColour
.notIllegalVertical
	lda .processed
	and #JoystickBits_Left | JoystickBits_Right
	bne .notIllegalHorizontal
	lda .processed
	ora #JoystickBits_Left | JoystickBits_Right
	sta .processed
;	inc VIC2BorderColour
.notIllegalHorizontal
}

!ifdef Joystick_DebugAutomate {
.joystickFake		!by 0
.joystickFakePos	!by 0
.joystickFakeDelay	!by 0

.joystickDoRestore	!by 0 , 0

; Input followed by the number of frames delay, until input = 0
.joystickInputs
	!by !(JoystickBits_Up)			, 50
	!by !(JoystickBits_Down)		, 50
	!by !(JoystickBits_Left)		, 50
	!by !(JoystickBits_Right)		, 50
	!by !(JoystickBits_Fire)		, 1

	!by !(JoystickBits_Down)		, 5
	!by !(0)						, 50
	!by !(JoystickBits_Down)		, 5
	!by !(0)						, 50
	!by !(JoystickBits_Down)		, 5
	!by !(0)						, 50
	!by !(JoystickBits_Down)		, 5
	!by !(0)						, 50
	!by !(JoystickBits_Left)		, 50
	!by !(JoystickBits_Up)			, 50
	!by !(0)						, 50
	!by !(JoystickBits_Left)		, 50
	!by !(0)						, 50

	!by !(JoystickBits_Down)		, 5
	!by !(0)						, 50
	!by !(JoystickBits_Down)		, 5
	!by !(0)						, 50

	!by !(JoystickBits_Fire)		, 10
	!by !(JoystickBits_Left | JoystickBits_Fire)	, 50
	!by !(JoystickBits_Right | JoystickBits_Fire)	, 50
	!by !(JoystickBits_Up | JoystickBits_Fire)		, 50
	!by !(JoystickBits_Down | JoystickBits_Fire)	, 50

	!by !(JoystickBits_Left)		, 50
	!by !(JoystickBits_Up)			, 150

	!by !(0)						, 50
	!by !(JoystickBits_Fire)		, 10
	!by !(JoystickBits_Up | JoystickBits_Fire)	, 150

	!by 0
}

Joystick_Read
!ifdef Joystick_DebugAutomate {
	ldy .joystickFakePos

	lda .joystickFakeDelay
	bne .justTick

	iny
	iny
	sty .joystickFakePos

.resetRead
	lda .joystickInputs+1,y
	sta .joystickFakeDelay
.justTick
	dec .joystickFakeDelay

	lda .joystickInputs,y
	bne .doInput

	; Reached the end of the list so
	ldy #0
	sty .joystickFakePos
	jmp .resetRead

.doInput
	sta .joystickFake

	; Generate a fake quit NMI after some time
	inc .joystickDoRestore
	bne .noExit
	inc .joystickDoRestore+1
	lda .joystickDoRestore+1
	cmp #50
	bcc .noExit

	lda #0
	sta .joystickDoRestore+1

	; After a long time fake a game reset
	inc NMINotTimerGenerated
.noExit

}

!ifdef JoystickA_Enable {

!ifdef Joystick_DebugAutomate {
	lda .joystickFake
} else {
	lda CIA1KeyboardColumnJoystickA
}
	+Joystick_CommonRead JoystickA_Raw , JoystickA_Processed
}
!ifdef JoystickB_Enable {
!ifdef Joystick_DebugAutomate {
	lda .joystickFake
} else {
	lda CIA1KeyboardRowsJoystickB
}
	+Joystick_CommonRead JoystickB_Raw , JoystickB_Processed
}
	rts
