; Citadel 2
; Uses the general purpose scrolling game code in the Scroller directory.
!to "Citadel2.prg", cbm
!sal
!sl "Citadel2.map"
!svl "Citadel2.lbl"
!pdb "Citadel2.pdb"
!cpu 6510
!ct pet
!initmem %10101010

!source "asm/DataDefs.a"
!source "ScrollerVars.a"

; Define this to enable the player map block alignement tests
MapBlockAlignedMovement = 1

ScrollerPreGameCalcuation_Enable = 1

DynamicMemory_ZP_lo = tempWork7
DynamicMemory_ZP_hi = tempWork8

; Define what the multiplexor can use
Multiplex_VarBase	= scrollerDemo_endVars
Multiplex_spritepointer	= $cbf8
Multiplex_IRQServiceRoutineLo = KERNALIRQServiceRoutineLo;
Multiplex_IRQServiceRoutineHi = KERNALIRQServiceRoutineHi;
;Multiplex_items	= 32
Multiplex_items	= 24
;Multiplex_items	= 16
Multiplex_DiscardSpritesYPosUseLocation = 1

; Clears the animation state
UseAnimationInit = 1
UseAnimationInit2 = 1
SolidMapBlockIndex = 12

;DisableSound = 1

; Allows the number of enemy slots to check each frame of the on-screen check to be tweaked
numEnemySlotsToOnScreenCheck = 4				; Must by power of 2
numMaxEnemySlotsToOnScreenCheckShiftRight = 4
!if numMaxEnemySlotsToOnScreenCheck/numEnemySlotsToOnScreenCheck > 32 {
!error "numMaxEnemySlotsToOnScreenCheck/numEnemySlotsToOnScreenCheck must be <= 32 to allow the offscreen check enough time to activate the enemy DB position into the animation system"
}
!if (2^numMaxEnemySlotsToOnScreenCheckShiftRight) != (numMaxEnemySlotsToOnScreenCheck/numEnemySlotsToOnScreenCheck) {
!error "2^numMaxEnemySlotsToOnScreenCheckShiftRight must equal numMaxEnemySlotsToOnScreenCheck/numEnemySlotsToOnScreenCheck"
}

UseEnemyProcessActivation = 1
RedirectHandleUserInput = 1
; This creates a static enemy bullet that can be used to check the enemy bullet to player collision code and the bound box size is OK
; Also the player speed is set to be very slow
;DebugEnemyBullet = 1
;DebugPickup = 1

; The timeout for map DB objects being off screen and retiring their sprite animation slots
offScreenTimeout = (50/(numMaxEnemySlotsToOnScreenCheck/numEnemySlotsToOnScreenCheck))+1
;offScreenTimeout = 1	; For debug, immediate removal


;Multiplex_SplitSort = 1
!source "../SpriteMultiplexor/SpriteMultiplexorVars.a"
!ifdef Multiplex_SplitSort {
MultiplexSort_YPos = AnimationYPosToSort
}

Multiplex_EnableEarlyOut = 1
Multiplex_OverflowRasterCheck1 = 1
Multiplex_OverflowRasterCheck2 = 1
Multiplex_BunchingCheck = 1

; Debug colour changes for the border
;Multiplexor_DebugBorder = 1
; IRQs generated by this application and not those generated by the multiplexor.
;Scroller_DebugIRQBorder = 1
; NMIs generated by this application
;Scroller_DebugNMIBorder = 1
; Non-interrupt timings
;Scroller_DebugMainlineBorder = 1
;Scroller_DebugColourScrollTimings = 1
;Scroller_DebugScreenScrollTimings = 1
;Scroller_DebugParalaxScrollTimings = 1
;MazeSolve_DebugBorder = 1

Scroller_MultiDirection = 1
; Saves 1K of code space
Scroller_MultiDirectionNoDiagonals = 1

; With this enabled the memory gets a little tight, but the level data still fits.
; However there are some frame timing issues when the display shows a lot of enemies that fire.
; CharColoursForEveryCharacter is in DataDefs.a:
!ifdef CharColoursForEveryCharacter {
Scroller_NeedFullColourScroll = 1
}

Scroller_UseDemoScorePanel = 1

Scroller_ClearColour = VIC2Multicolour_White

Scroller_DisableUpdateSprites = 1

Scroller_SpriteNegativeColourEqualsFlashingColour = VIC2Colour_White

; Try out full screen code, it has issues
; IRQOpenBorders
!if 0 {
; Too much slow down
Scroller_FullScreen = 1
; Issues with the ScrollerOpenBorderCopyBank* routine, since it uses memory used for TraceBackResultBuffer = $c00
; Also there are timing issues with the top of the screen flickering.
IRQOpenBorders = 1
ScorePlayer1XPos = 44
ScorePlayer2XPos = 228
}

; These hooks, will have EQ status if the escape condition has not been met yet, and NE status if the condition has been met
EnableScrollerDemoWaitTopIRQHook = 1
EnableScrollerDemoWaitScorePanelHook = 1
EnableScrollerDemoWaitMultiplexHook = 1

EnableScorePanelDataHook = 1

; More hooks for character animations
EnableAfterScrollersHook = 1
EnableBeforeScrollersHook = 1

; Wall chars >= than this
MapWallChars=160

ClearGameScreensChar = 71

PickupDropChance = 128
;PickupDropChance = 220

Scroller_DisplayTitleScreen = 1
TitleScreenAnimationHook_Enable = 1

!source "ScrollEntryCommon.a"
!source "asm/Animations.a"
MazeNodesAlloced = 1
MazeSolve_ZP_base	= Multiplex_endVars
MazeSolveReversedOff = 1
MazeSolve_LeanAndMean = 1
!source "asm/MazeSolve.a"
!source "asm/MazeSupport.a"
!source "asm/MapUtils.a"
!source "asm/Enemy.a"
!source "asm/UserInput.a"
!zn {
DynamicMemory_HeapCorruptHook
	sei
.l1
	inc VIC2BorderColour
	jmp .l1
}
!source "asm/DynamicMemory.a"
!source "asm/PlayerBullets.a"
!source "asm/Maths.a"
!source "asm/Camera.a"
!source "asm/SubGame.a"
!source "asm/SubGameInput.a"
!source "asm/Teleport.a"
!source "asm/Radar.a"
!source "SFXWithMusic.a"
!source "asm/Inventory.a"
!source "asm/TitleScreen.a"
!source "asm/Loader.a"

; Decompression code
!macro RNXPCompressionIncBorder_A {}
Decompression_OptimiseForOneEscapeBit = 1
Decompression_OptimiseNoChangingEscape = 1

!source "Decompression.a"
!source "DecompressionP2.a"
!source "DecompressionVars.a"
CompressionStartOfHistoryBufferTables = *
!fill CompressionHistoryBufferTablesSize , 0

JoystickA_Enable = 1
; Enable this to use debug automation for the joystick code, this fakes player input
;Joystick_DebugAutomate = 1
!source "asm/Joystick.a"
!source "asm/MapAnimations.a"
!source "asm/PlayerSweep.a"

Citadel2EndCode = *

!source "asm/Data.a"
