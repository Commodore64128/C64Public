!source "ScrollerMacros.a"

; This code is post-build linked with a decompression stage so we don't use any BASIC sys start code here.
; Instead the start for the code is $400 which is quickly overwritten by other data once the
; real game code starts.
*=$400
ScrollerInitSpecificCode_Start = *
!ifdef Scroller_EarlyStartHook_Enable {
	jsr Scroller_EarlyStartHook
}
	; Setup a nice stable blank screen and known machine state
!ifdef Scroller_NoInitialiseMachine {} else {
	lda #Scroller_ProcessorPort
	jsr InitialiseMachine
}
	; Setup NMI because the initialise points to code that gets overwritten
	lda #<ScrollerNMI1
	sta Scroller_NMIVectorLo
	lda #>ScrollerNMI1
	sta Scroller_NMIVectorHi
	lda #0
	sta VIC2SpritePriority
	sta VIC2SpriteMulticolour

!ifdef Global_SpriteExpandX {
	lda #$ff
}
	sta VIC2SpriteDoubleWidth
!ifdef Global_SpriteExpandY {
	lda #$ff
} else {
	lda #0
}
	sta VIC2SpriteDoubleHeight

	; One time initialisation like moving memory around to the correct places and pre-calculation.
	jsr ScrollerDemoInitOneTimeData
	jmp ScrollEntry
	; This initialise code is here because we only use it once. Later the code is written
	; by the title screen display code.
!source "../stdlib/Initialise.a"
!source "OneTime.a"
ScrollerInitSpecificCode_End = *
ScrollerInitSpecificCode_Size = * - ScrollerInitSpecificCode_Start
	; The start of the real code. Memory from $400 to $fff is written by the title screen display code
*=$1000
ScrollerSpecificCode_Start = *
!zn
ScrollEntry
	; The following can be called more than once if needed for a proper game type cycle
.l1
!ifdef Scroller_DecompressTitleScreenCodeHook {
	jsr DecompressTitleScreenCode
}
!ifdef Scroller_DisplayTitleScreen {
	jsr DisplayTitleScreen
}

!ifdef Scroller_DecompressGameCodeHook {
	jsr DecompressGameCode
}
	jsr InitialiseGame
	jsr SetupIRQs
	jsr ScrollerDemoWaitTopIRQWithReSync
	jsr ScrollerDemoMainline
	jmp .l1

!ifdef Scroller_DisplayTitleScreen {
TitleScreen_Enable_ScrollerDemoWait_Hooks !by 1
}

!ifdef Scroller_RunJumpDemo {
EnableBeforeScrollersHook = 1
EnableAfterScrollersHook = 1
}

!source "SetupIRQs.a"
!source "ScrollMain.a"
; The multiplexor uses the MultiplexExt_LastIRQ label defined in "SetupIRQs.a"
!source "../SpriteMultiplexor/SpriteMultiplexor.a"

!ifdef Scroller_RunJumpDemo {
MapSolidChars = 43
!source "CharEffects.a"
}

!ifdef Scroller_EnableSpeedCode {
!ifndef Scroller_MultiDirection {
!error "Scroller_EnableSpeedCode without Scroller_MultiDirection is not implemented"
}
CartSelectBank_ProcessorPort	= ProcessorPortDefault
CartKillBank_ProcessorPort		= Scroller_ProcessorPort
!source "../MakeCart/asm/EasyFlash_Code.a"
;!source "../MakeCart/asm/GMod2_Code.a"
!source "CatchUndefCartFiles.a"
}

ScrollerSpecificCode_End = *
ScrollerSpecificCode_Size = * - ScrollerSpecificCode_Start
