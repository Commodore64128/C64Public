* Consider using cartridge based speed code for unrolled screen scrolling code.
	C:\Downloads\WinVICE-2.4.6-x86-r28113\WinVICE-2.4.6-x86-r28113\x64sc.exe +warp -cartcrt Citadel2.crt
	Code and data would need to be re-arranged to account for $8000-$9fff being mapped at ROM sometimes
		Cycles per char
			Looping	4 + 4 + 2 + 3	= 13
			Speed	4 + 4			= 8
		Code size:
			Looping:	ScreenScrollerCodeEnd - ScreenScrollerCodeStart = 2484 - 1c04 = 880
			Speed:		40 * 20 * 8 * 2 * 6 = 12C00 (12C0 per bank per direction, so need 16 ROM banks for 8 way 2 banks)
	ScrollerStrips has self modifying code so it's not a candidate
	* Will need a common batch file for creating the relevant scroller binaries
		* Can import values from the map
	* and creating a crt image
	http://codebase64.org/doku.php?id=base:crt_file_format#ocean_type_1
	* bin\MakeCart.exe already supports larger carts with higher bank numbers
	Added code to ScrollersNoColour.a to use +Scroller_ScrollExecCartBank
	Adding scroller code into CartCode, this will then get added to a cart image
		cd /d c:\Work\C64\Scroller\CartCode
		..\..\acme.exe -o c:\temp\t0.bin ScrollerNoColour0To1_1.a
		..\..\acme.exe -o c:\temp\t1.bin ScrollerNoColour1To0_1.a
		..\..\bin\MakeCart.exe -n -b 9 -r c:\temp\t0.bin -c 0 0 $2000 -w -r -b 10 -r c:\temp\t1.bin -c 0 0 $2000 -w -b 11 -r c:\temp\t0.bin -c 0 0 $2000 -w -b 12 -r c:\temp\t0.bin -c 0 0 $2000 -w -o c:\temp\t.crt




; Aimed fire improvement by taking into account any scroll speed, player movement and distance, then aim for that spot.


; Enemy aimed fire to target both players when they are active. Alternate fire, or nearest enemy to player fire mode.


; Optimise the block plot and screen scroll loops. Unroll more.


; For map types where each character is mapped to a specific colour (block colour data is *not* duplicated)
; then the side colour update can be a fast unrolled section of code that does a lookup based on the screen data that will be switched to.
; This means the colour block plot doesn't need to do so much work.


; MPi: TODO: If not IRQOpenBorders then IrqTopOfScreen does not need to be at raster pos 0, it can be moved downwards to just before the first sprites are needed


; MPi: TODO: Add horizontally/vertically scrolling demo for platform game controller with standard gravity and velocity.


; MPi: TODO: For smoothed enemy movement. When an enemy is spawned calculate its entire delta movement every frame with a smoothing target based algorithm. Like the old style camera movement algorithms from long time ago.
;	It needs to be delta movement per frame so it can take into account any scrolling movement of course.
;	delta = (targetPos - currentPos) * 0.9 (or some suitable close fraction that is easily calculated in binary using div/mul 2)


; MPi: TODO: Double check directional and directional hold fire bullet animations from moving and stationary enemies that are either directional, directional hold or sequenced animations.
; Check moving and bullet speed 0 stationary bullets.
; Write tests. Satisfy the tests.
; It seems as though a bullet speed of zero results in incorrect animation direction calculation due to:
;	jsr AnimationConvertXYToDirection
;	ldx tempWork7
;	sta AnimationDirectionIn,x
; Solution: If the input direction is set by the player, i.e. it isn't random, then use the direction instead of calculating it.



; MPi: TODO: Push scroller, when the player death animation is playing it's possible to push scroll the screen with the joystick.
; Maybe only when the players are linked?



; MPi: TODO: If the sort is already after the multiplexor end (and the sprite collisioon is off) then just do the full copy and sort without buffering.



; MPi: TODO: Double check the sprite X and Y placement in normal SEUCK and horizontal SEUCK.
; See Scroller_SpriteXAdjust and Scroller_NoSpriteYAdjust
; Check final placement of enemies with scrolling levels that scroll to static screens and also
; just the static screens. Check push scroll as well.
; In the horizontal SEUCK games there is a chance the sprites are appearing one pixel offset from
; where they should be.
; I have a theory the problem is with the original SEUCK code where the sprites can lag one frame
; position behind a scroll. This does mean that there is no easy fix since while scrolling people
; might have placed their sprites to compensate for this one frame lag. In this case just make
; sure the sprite position is correct when the screen is static or stops scrolling (like that 
; scroll after a push scroll).



; MPi: TODO: Add configuration to shift the screen split down one or two characters giving different size bottom areas.
; Things to tweak: scorePanelPos1 , (19*40) and (20*40) will need to be optionally enabled, MACROScrollerBottomAdjust , MACROScrollerDrawVStrip, MACROScrollerDrawVStripColour, ScrollerDrawStripBottomBank,
; ScrollerDrawStripBottomColour, DrawMap
; InitBank0Data and ClearGameScreens where it copies the screen liens at 20*40
