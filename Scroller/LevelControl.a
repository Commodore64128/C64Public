; Cheat mode: Change levelStart to skip to that level. The usual value is 0.
levelStart = 0

; Controls when the level should scroll, be still, when to draw, when to stop etc.
LevelStaticCountSeconds !by 0
; The count in frames
LevelStaticCountFrames !by 0
LevelScrollToggle !by 0
LevelWantPushScroll !by 0
LevelIsPushScrolled !by 0
Level_PreviousScrollTypeAndSpeed !by 0

!ifdef Scroller_IsHorizontal {
LevelPositionAdjustment = 8
} else {
LevelPositionAdjustment = 5
}

; Lo/hi of the current level properties
LevelPointer !by 0,0
oldScrollMapHY !by 0
oldScrollMapHY2 !by 0
LevelNum !by 0

!zn
LevelStaticTicks = 50
LevelInit
	lda #0
	sta LevelStaticCountSeconds
	sta LevelScrollToggle
	sta LevelWantPushScroll
	sta LevelIsPushScrolled
	lda #levelStart
	sta LevelNum
	lda #<(LevelProperties + (levelStart * 7))
	sta tempWork0
	sta LevelPointer
	lda #>(LevelProperties + (levelStart * 7))
	sta tempWork1
	sta LevelPointer+1
	lda #0
	sta oldScrollMapHY
	sta oldScrollMapHY2
	sta Level_PreviousScrollTypeAndSpeed
	jsr LevelSetupNextLevel
	rts

; Call this every frame
!zn
.notStillS jmp .notStill
LevelFrameLogic
	; Reset any scroll and let this level logic figure out what to do each frame
	lda #0
	sta frameTargetVelY

	lda LevelPointer
	sta tempWork0
	lda LevelPointer+1
	sta tempWork0+1
	ldy #5
	lda (tempWork0),y
	and #%11000000
	bne .notStillS
	; Must be the still type so process the counters
	lda LevelStaticCountSeconds
	beq .doNextLevel
	lda LevelStaticCountFrames
	bne .exitEndOfLogicS
	lda #LevelStaticTicks
	sta LevelStaticCountFrames
	dec LevelStaticCountSeconds
	beq .doNextLevel
.exitEndOfLogicS	jmp .exitEndOfLogic
!ifdef WackyWaste {
	; Update this table do decide on which levels to switch player animations
	; 0 means don't swap at the start of the level
	; 1 means swap at the start of the level
DoPlayerSwapTable !by 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0
					 ;1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24
}
LevelDoSkipNow
.doNextLevel
	lda LevelSwitchOverride
	bmi .doNormalAdvance1
	sta LevelNum
	jmp .odoNormalAdvance1
.doNormalAdvance1
	inc LevelNum
.odoNormalAdvance1
!ifdef WackyWaste {
	ldx LevelNum
	lda DoPlayerSwapTable,x 
	beq .overPlayerSwap2
	lda tempWork0
	pha
	lda tempWork1
	pha

	; Switch over the player when the level ends
	ldx Player2Information+PlayerGameOffset_AnimationIndex
	bmi .swapToP2

	; Remove the old player
	lda #$ff
	sta Player2Information+PlayerGameOffset_AnimationIndex
	sta AnimationType,x

	ldy #AnimationType_Player1
	jsr AnimationFindFreeSlot
	; No error check needed since animations have just been initialised
	stx Player1Information+PlayerGameOffset_AnimationIndex
	jsr Player1TestSpawnPosition

	jmp .overPlayerSwap
.swapToP2
	ldx Player1Information+PlayerGameOffset_AnimationIndex
	; Remove the old player
	lda #$ff
	sta Player1Information+PlayerGameOffset_AnimationIndex
	sta AnimationType,x

	ldy #AnimationType_Player2
	jsr AnimationFindFreeSlot
	; No error check needed since animations have just been initialised
	stx Player2Information+PlayerGameOffset_AnimationIndex
	jsr Player2TestSpawnPosition

.overPlayerSwap
	pla
	sta tempWork1
	pla
	sta tempWork0
.overPlayerSwap2
}
	; Preserve where we are in the map so far, with the top of the screen adjustment
	lda scrollMapHPos
	sec
	sbc #LevelPositionAdjustment
	sta oldScrollMapHY
	lda scrollMapHPos2
	bcs .noWrap2
	sec
	sbc #1
.noWrap2
	sta oldScrollMapHY2

	lda LevelSwitchOverride
	bpl .fakeRedraw

	ldy #6
	lda (tempWork0),y
	bne .notRedraw

.fakeRedraw
	; Must be redraw
	jsr LevelProgress

	; Test for still (static) level redraw tweak
	lda Level_PreviousScrollTypeAndSpeed
	and #%11000000
	bne .notPreviousStill
	ldy #5
	lda (tempWork0),y
	and #%11000000
	bne .stillNotStill

	; Previous level was still, this level is still, force an enemy redraw by forcing a changed level pointer
	jsr .changed
	jmp .skipStillTest
.notPreviousStill
.stillNotStill
	jsr .doDislocationTest
.skipStillTest

	; If the next type is scroll then we delete the enemies.
	; If it is still or push we do not. (This supports the SEUCK demo game files)
	ldy #5
	lda (tempWork0),y
	and #%11000000
	beq .noClear	; Is currently still
	cmp #%11000000
	beq .noClear	; Is currently push
	jsr AnimationKillEverythingExceptPlayers
.noClear
	jsr DrawMap
	lda #$cb
	jsr Multiplex_SetSpritePointer
;	jsr ScrollerDemoWaitTopIRQWithReSync
	jmp .exitEndOfLogic

.notRedraw
	cmp #$ff
	bne .notLoop

	; Must be loop
	jsr AnimationKillEverythingExceptPlayers
	lda #-1
	sta LevelSwitchOverride
	lda #0
	sta LevelNum
	sta Level_PreviousScrollTypeAndSpeed
	lda #<LevelProperties
	sta tempWork0
	sta LevelPointer
	lda #>LevelProperties
	sta tempWork1
	sta LevelPointer+1
	jsr LevelSetupNextLevel
	jsr LevelCalculateTotalScrollValue
	jsr AnimationEnemyTriggerInit
	jsr AnimationEnemyTriggerSkipMap
	jsr DrawMap
	lda #$cb
	jsr Multiplex_SetSpritePointer
;	jsr ScrollerDemoWaitTopIRQWithReSync
	jmp .exitEndOfLogic

.doDislocationTest
	; Did the map pointer just change from what we have previously?
	lda scrollMapHPos
	cmp oldScrollMapHY
	bne .changed
	lda scrollMapHPos2
	cmp oldScrollMapHY2
	bne .changed
	jmp .noChange
.changed
	jsr LevelCalculateTotalScrollValue
	jsr AnimationEnemyTriggerInit
	jsr AnimationEnemyTriggerSkipMap
	; Restore pointers splatted by the above function calls
	lda LevelPointer
	sta tempWork0
	lda LevelPointer+1
	sta tempWork0+1
.noChange
	rts

.notLoop
	; Must be continue, the scroll continues on from whatever is on the screen
	jsr LevelProgress

	; But we must adjust the level scroll position to do the enemy map tests
	lda scrollMapHPos
	sec
	sbc #5		; MPi: TODO: This magic number 5 is actually the LevelPositionAdjustment used
				; by the vertical scrolling version. This might indicate a bug in the current
				; version of horizontal SEUCK where the map position is fudged. To be checked.
	sta scrollMapHPos
	lda scrollMapHPos2
	bcs .noWrap4
	sec
	sbc #1
.noWrap4
	sta scrollMapHPos2

	jsr .doDislocationTest

	lda scrollMapHPos
	clc
	adc #LevelPositionAdjustment
	sta scrollMapHPos
	lda scrollMapHPos2
	bcc .noWrap5
	clc
	adc #1
.noWrap5
	sta scrollMapHPos2

.exitEndOfLogic
	dec LevelStaticCountFrames
	; There is a bug in SEUCK where the first level static count is twice as fast as it should be.
	; So test the level pointer with the start of the data and make the counter twice as fast if
	; needed.
	lda #<LevelProperties
	cmp LevelPointer
	bne .notFirst
	lda #>LevelProperties
	cmp LevelPointer+1
	bne .notFirst
	dec LevelStaticCountFrames
.notFirst
	jmp .exitLevelLogic

.notStill
	and #%01000000
	bne .isPush
	lda #0
	sta LevelIsPushScrolled
.performScroll
	; Must be scroll type or the push scroll came in here
	lda (tempWork0),y
	and #1
	bne .scrollSpeed1
	; Scroll speed 0
	lda LevelScrollToggle
	eor #1
	sta LevelScrollToggle
	bne .exitLevelLogic
.scrollSpeed1
	lda #1
	sta frameTargetVelY
.performEndOfLevelCheckForScrollingTypes	
	; Check to see if we have reached the end of the scroll area and if so then progress the level
	lda frameScrollPos
	cmp #0
	bne .notWholeBlockYet
	lda scrollMapLPos
	cmp #4
	bne .notWholeBlockYet

	lda scrollMapHPos
	sec
	sbc #LevelPositionAdjustment
	sta .tempYP
	lda scrollMapHPos2
	bcs .noWrap
	sec
	sbc #1
.noWrap
	ldy #3
	cmp (tempWork0),y
	bne .notWholeBlockYet

	lda .tempYP
	ldy #2
	cmp (tempWork0),y
	bne .notWholeBlockYet
	jmp .doNextLevel
.tempYP !by 0
.notWholeBlockYet

	jmp .exitLevelLogic

.isPush
	lda #1
	sta LevelIsPushScrolled
	lda LevelWantPushScroll
	bne .performScroll
	; If we are not push scrolling we might have got there the previous frame so we check.
	jmp .performEndOfLevelCheckForScrollingTypes

.exitLevelLogic
	lda #0
	sta LevelWantPushScroll
	lda #-1
	sta LevelSwitchOverride
	rts

!zn
LevelCalculateTotalScrollValue
	; loop around calculating the starting 16 bit map position from what we are drawing
	lda #0
	sta TotalScrollPosition
	sta TotalScrollPosition+1
	ldx scrollMapHPos
	beq .calcl3
.calcl1
	lda TotalScrollPosition
	clc
	adc #40
	sta TotalScrollPosition
	bcc .calcl2
	inc TotalScrollPosition+1
.calcl2
	dex
	bne .calcl1
.calcl3
	ldx scrollMapHPos2
	beq .calcl5
.calcl4
	; Add on 256 * 40
	lda TotalScrollPosition+1
	clc
	adc #40
	sta TotalScrollPosition+1
	dex
	bne .calcl4
.calcl5

	rts

!zn
LevelSetupNextLevel
	ldy #0
	lda (tempWork0),y
	sta scrollMapHPos
	iny
	lda (tempWork0),y
	sta scrollMapHPos2
	ldy #4
	lda (tempWork0),y
	sta LevelStaticCountSeconds
	; Stop any scroll that might be floating around during a level transition.
	lda #0
	sta frameTargetVelY
	lda #LevelStaticTicks
	sta LevelStaticCountFrames
	rts

LevelSwitchOverride !by -1

!zn
LevelProgress
	ldy #5
	lda (tempWork0),y
	sta Level_PreviousScrollTypeAndSpeed

	ldx LevelSwitchOverride
	bmi .noOverride1

	lda #<LevelProperties
	sta tempWork0
	lda #>LevelProperties
	sta tempWork1
.lc1
	cpx #0
	beq .lc2
	dex
	lda tempWork0
	clc
	adc #7
	sta tempWork0
	bcc .lc1
	inc tempWork1
	jmp .lc1
.lc2
	lda tempWork0
	sta LevelPointer
	lda tempWork1
	sta LevelPointer+1

	lda #0
	sta oldScrollMapHY
	sta oldScrollMapHY2
	sta LevelStaticCountSeconds
	sta frameScrollPos
	lda #4
	sta scrollMapLPos

	jmp .noCarry

.noOverride1
	lda tempWork0
	clc
	adc #7
	sta tempWork0
	; Carry the carry
	bcc .noCarry
	inc tempWork1
.noCarry
	jsr LevelSetupNextLevel
	lda tempWork0
	sta LevelPointer
	lda tempWork1
	sta LevelPointer+1
	rts


!zn
LevelDoSwitch
	sta LevelSwitchOverride

	lda #0
	sta frameTargetVelY

	jsr AnimationKillEverythingExceptPlayers
	jsr AnimationEnemyTriggerInit
	jsr LevelDoSkipNow
	jmp SkipLevelFrameLogic	; Must skip the level control logic this frame due to the skip
