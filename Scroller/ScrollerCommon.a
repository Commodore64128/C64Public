MarkCommonCode = *
; A place for common stuff.

ScreenTabL !for .table1,25 {!by <((.table1-1) * 40) }
ScreenTabH !for .table1,25 {!by >(((.table1-1) * 40)) }
ColourTabH !for .table1,25 {!by (>COLOURRAM) + >(((.table1-1) * 40)) }

!ifdef Scroller_MultiDirection {
BlockTabL !for .table1,256 {!by <(BlockData + (.table1-1) * 16) }
BlockTabH !for .table1,256 {!by >(BlockData + ((.table1-1) * 16)) }
} else {
BlockTabL !for .table1,128 {!by <(BlockData + (.table1-1) * 25) }
BlockTabH !for .table1,128 {!by >(BlockData + ((.table1-1) * 25)) }
}

!ifdef BlockColoursForEveryCharacter {
BlockColTabL !for .table1,256 {!by <(BlockColours + (.table1-1) * 16) }
BlockColTabH !for .table1,256 {!by >(BlockColours + ((.table1-1) * 16)) }
}

!ifdef IRQOpenBorders {
; Copy what is at the top of the bank 3 screen to the other pretend screens in bank 0 so the
; VIC gets the correct character data for the top of the screen fetch.
!zn
ScrollerOpenBorderCopyBank0
	ldx #39
.more
	lda $c800,x
	sta $0800,x
	dex
	bpl .more
	rts

!zn
ScrollerOpenBorderCopyBank1
	ldx #39
.more
	lda $cc00,x
	sta $0c00,x
	dex
	bpl .more
	rts
}

!zn
ScrollerUpdateTopIRQ
	; Update screen scrolling from what the frame data says
!ifdef Scroller_MultiDirection {
	lda frameScrollX
	sta topScreenScrollX
	lda frameScrollY
	sta topScreenScrollY
} else {
	lda frameScrollPos
;	lda #6	; Debug: Force the bad line code to be used no matter what the scroll should be
;	lda #2	; Debug: Force a non-bad line to be used no matter what the scroll should be
;	lda #4	; Debug: Force a non-bad line in the bottom open border area to be used no matter what the scroll should be
	sta topScreenScrollPos
}
	rts



!zn
ScrollerFlipBank
	; Do this first since the colour scroll can take some time
	lda topScreenBank
	eor #1
ScrollerSetBank
	sta topScreenBank
	beq .m1
	lda #$cf
	bne .m2
.m1
	lda #$cb
.m2
	jsr Multiplex_SetSpritePointer
	rts
