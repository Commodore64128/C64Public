!zn
AnimationInit
	ldx #Multiplex_items-1
.l1
	lda #$ff
!ifdef Multiplex_SplitSort {
	sta AnimationYPosToSort,x
}
	sta AnimationYPos,x
	lda #0
	sta AnimationXPosHi,x
	sta AnimationXPosLo,x
	dex
	bpl .l1

	rts


!ifdef Multiplex_SplitSort {
; If Multiplex_SplitSort then after this call Multiplex_Sort
!zn
AnimationUpdateMultiplexorPre
	ldx #Multiplex_items-1
.l1
!ifdef Animation_ActiveNonZeroEnabled {
	lda Animation_ActiveNonZero,x
	beq .blank
}
	; Is the sprite totally blank? If yes then skip it
	ldy AnimationSpriteFrame,x
	lda SpriteEmptyLookupTab,y
	beq .blank

	lda AnimationYPos,x
!ifndef Animation_ActiveNonZeroEnabled {
	cmp #$ff
	beq .blank2
}
!ifdef Scroller_DiscardMinSpriteYPos {
	cmp #Scroller_DiscardMinSpriteYPos
	bcc .blank
}
!ifdef Scroller_DiscardForMultiplexorBottomDefined {
	cmp #Scroller_DiscardForMultiplexorBottom
	bcs .blank
}
	sta AnimationYPosToSort,x

	; TODO: Why does this make the sprite update go wrong near the MSB when scrolling left/right?
;!ifdef Scroller_DiscardForMultiplexorRight {
;	lda AnimationXPosHi,x
;!if Scroller_DiscardForMultiplexorRight >= $100 {
;	beq .noXDiscard
;}
;	lda Multiplex_XPosLo,x
;	cmp #<Scroller_DiscardForMultiplexorRight
;	bcs .blank
;.noXDiscard
;}


	dex
	bpl .l1
	rts

	; This discards the sprite by moving it beyond the y position where the multiplexor rejects
	; sprites.
.blank
	lda #$ff
.blank2
	sta AnimationYPosToSort,x
	dex
	bpl .l1
	rts
}



; If not Multiplex_SplitSort then after this call Multiplex_Sort
!zn
AnimationUpdateMultiplexor
	ldx #Multiplex_items-1
.l1
!ifndef Multiplex_SplitSort {
!ifdef Animation_ActiveNonZeroEnabled {
	lda Animation_ActiveNonZero,x
	beq .blank
}
}
!ifdef Multiplex_SplitSort {
	; Used later on...
	lda AnimationYPosToSort,x
	cmp #$ff
	beq .blank2
}
!ifndef Multiplex_SplitSort {
	; Is the sprite totally blank? If yes then skip it
	ldy AnimationSpriteFrame,x
	lda SpriteEmptyLookupTab,y
	beq .blank
	; Used later on...
	lda AnimationYPos,x
!ifndef Animation_ActiveNonZeroEnabled {
!ifndef Scroller_DiscardForMultiplexorBottomDefined {
	cmp #$ff
	beq .blank2
}
}
!ifdef Scroller_DiscardMinSpriteYPos {
	cmp #Scroller_DiscardMinSpriteYPos
	bcc .blank
}
!ifdef Scroller_DiscardForMultiplexorBottomDefined {
	cmp #Scroller_DiscardForMultiplexorBottom
	bcs .blank
}
} ; <!ifndef Multiplex_SplitSort {
	sta Multiplex_YPos,x

	lda AnimationSpriteFrame,x
	sta Multiplex_SpriteFrame,x

	lda AnimationSpriteColour,x
!ifdef Scroller_SpriteNegativeColourEqualsFlashingColour {
	bpl .isColour
	eor #$ff
	; And reset the next frame?
	sta AnimationSpriteColour,x
	lda #Scroller_SpriteNegativeColourEqualsFlashingColour
.isColour
}
	sta Multiplex_Colour,x

	lda AnimationXPosLo,x
	sta Multiplex_XPosLo,x
	lda AnimationXPosHi,x
	sta Multiplex_XPosHi,x
!ifndef Multiplex_SplitSort {
!ifdef Scroller_DiscardForMultiplexorRight {
!if Scroller_DiscardForMultiplexorRight >= $100 {
	beq .noXDiscard
}
	lda Multiplex_XPosLo,x
	cmp #<Scroller_DiscardForMultiplexorRight
	bcs .blank
.noXDiscard
}
} ; <!ifndef Multiplex_SplitSort {

	dex
	bpl .l1
	rts

.blank
	lda #$ff
.blank2
	sta Multiplex_YPos,x
	dex
	bpl .l1
	rts
