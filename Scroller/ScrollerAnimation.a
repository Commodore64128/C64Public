!zn
AnimationInit
	ldx #Multiplex_items-1
.l1
	lda #$ff
!ifdef Multiplex_SplitSort {
	sta AnimationYPosToSort,x
}
	sta AnimationYPos,x
	lda #0
	sta AnimationXPosHi,x
	sta AnimationXPosLo,x
	dex
	bpl .l1

	rts


!ifdef Multiplex_SplitSort {
; If Multiplex_SplitSort then after this call Multiplex_Sort
!zn
AnimationUpdateMultiplexorPre
	ldx #Multiplex_items-1
.l1
	lda AnimationYPos,x
	cmp #$ff
	beq .blank2

	; Is the sprite totally blank? If yes then skip it
	ldy AnimationSpriteFrame,x
	lda SpriteEmptyLookupTab,y
	beq .blank

	lda AnimationYPos,x
!ifdef Scroller_DiscardMinSpriteYPos {
!if Scroller_DiscardMinSpriteYPos > 0 {
	cmp #Scroller_DiscardMinSpriteYPos
	bcc .blank
}
}
	sta AnimationYPosToSort,x

	dex
	bpl .l1
	rts

	; This discards the sprite by moving it beyond the y position where the multiplexor rejects
	; sprites.
.blank
	lda #$ff
.blank2
	sta AnimationYPosToSort,x
	dex
	bpl .l1
	rts
}



; If not Multiplex_SplitSort then after this call Multiplex_Sort
!zn
AnimationUpdateMultiplexor
	ldx #Multiplex_items-1
.l1
!ifdef Multiplex_SplitSort {
	lda AnimationYPosToSort,x
	cmp #$ff
	beq .blank2
}
!ifndef Multiplex_SplitSort {
	; Is the sprite totally blank? If yes then skip it
	ldy AnimationSpriteFrame,x
	lda SpriteEmptyLookupTab,y
	beq .blank
	lda AnimationYPos,x
!ifdef Scroller_DiscardMinSpriteYPos {
!if Scroller_DiscardMinSpriteYPos > 0 {
	cmp #Scroller_DiscardMinSpriteYPos
	bcc .blank
}
}
}
	sta Multiplex_YPos,x

	lda AnimationSpriteFrame,x
	sta Multiplex_SpriteFrame,x

	lda AnimationSpriteColour,x
!ifdef Scroller_SpriteNegativeColourEqualsFlashingColour {
	bpl .isColour
	eor #$ff
	; And reset the next frame?
	sta AnimationSpriteColour,x
	lda #Scroller_SpriteNegativeColourEqualsFlashingColour
.isColour
}
	sta Multiplex_Colour,x

	lda AnimationXPosLo,x
	sta Multiplex_XPosLo,x
	lda AnimationXPosHi,x
	sta Multiplex_XPosHi,x

	dex
	bpl .l1
	rts

.blank
	lda #$ff
.blank2
	sta Multiplex_YPos,x
	dex
	bpl .l1
	rts
