* Art resource notes, moved from BombJack\TODO.txt and enhanced
* https://www.romhacking.net/utilities/641/
	https://opengameart.org/content/rpg-town-pixel-art-assets
	C:\Users\Martin Piper\Downloads\town_rpg_pack\town_rpg_pack
	* Unfortunately the above uses more than 8 colours per 16x16 tile, look for others?
	https://opengameart.org/content/colored-16x16-fantasy-tileset
	Tests worked quite well: https://twitter.com/MartinPiper/status/1218539634847711232
	Other open game art assets:
		https://opengameart.org/content/gradius-clone-sprites
		https://opengameart.org/content/mediumtanks
		https://opengameart.org/users/chabull
		https://opengameart.org/content/16x16-overworld-tiles
		https://opengameart.org/content/forest-tiles

	Map editors: https://www.mapeditor.org/2020/04/14/tiled-1-3-4-released.html
		C:\Users\Martin Piper\Downloads\tiled-windows-64bit-snapshot\tiled.exe
		Supports flips, allows export as large image
	https://ogmoeditor.itch.io/editor
	
	A thought, why not use the RPG assets? Those demonstrated by TestData2.txt
		The conversion is already setup, they do not use that many palettes
		Could include all the other graphics, especially for the chars and score panel
			Char screen can overlay shops
		The mode7 layer could be used to draw clouds, or other effects like wipe transitions (zooming circle?), over the sprites and tiles
			https://opengameart.org/content/cloud-set

	Using the ImageToBitplane tool Run/Debug Configuration: Main all conv
		--rgbshift 4 4 4 --newpalettes --forcergb 0 0 0 --paletteoffset 0 --palettesize 8 --startxy 0 0 --image "src/test/resources/map_9 - Copy.png" --tilewh 16 16 --imagequantize 8 --nowritepass --resetforcergb --forcergb 255 0 255 --spritexy 0 0xd0 --startxy 0 0 --image src/test/resources/TestImage1.png --tilewh 16 16 --imagequantize 32 --usestacking --nowritepass --resetforcergb --forcergb 0 0 0 --startxy 0 0 --image "src/test/resources/map_9 - Copy.png" --tilewh 16 16 --imagequantize 8 --outputplanes target/background_plane --outputscrcol target/background_tiles.bin --nostacking --numbitplanes 3 --convertwritepass --nowrite --resetforcergb --forcergb 255 0 255 --spritexy 0 0xd0 --startxy 0 0 --image src/test/resources/TestImage1.png --tilewh 16 16 --imagequantize 32 --outputplanes target/sprite_plane --outputsprites target/spriteSheet.txt --outputpalettes target/PaletteData.bin --usestacking --numbitplanes 3 --convertwritepass
	Using GenerateData configuration: Debug2

	This demonstrates stacked multiplexed sprites over a 16x16 tiled background.

	Using the ImageToBitplane tool Run/Debug Configuration: Main old bridge RGB 0 0 0 palette opt rgbfactor 32
		--rgbshift 4 4 4 --rgbfactor 255 196 112 10 --rgbfactor 255 255 214 50 --rgbfactor 236 98 96 50 --newpalettes --forcergb 0 0 0 --paletteoffset 0 --palettesize 8 --startxy 0 0 --image "src/test/resources/oldbridge cropped.bmp" --tilewh 16 16 --imagequantize 8 --nowritepass --palettequantize 32 --image "src/test/resources/oldbridge cropped.bmp" --tilewh 16 16 --fitpalettes --outputplanes target/background_plane --outputscrcol target/background_tiles.bin --outputpalettes target/PaletteData.bin --nostacking --numbitplanes 3 --convertwritepass

	This demonstrates a detailed background picture with 32 palettes of 8 entries each.
	
	Using the ImageToBitplane tool Run/Debug Configuration: Main mode7 "map_9 - mode7 test.png"
		--rgbshift 4 4 4 --palettesize 256 --loadpalette target/PaletteData.bin --image "src/test/resources/map_9 - mode7 test.png" --tilewh 16 16 --fitpalettes --outputtilebytes target/mode7_tiles.bin --outputscrcol target/mode7_screen.bin --nostacking --convertwritepass
		And enabling the data load at: ; Write Mode7 registers
		This will demonstrate how the mode7 export with flipped tile detection works

		
		
* Need to setup graphics conversion pipeline
	https://opengameart.org/content/rpg-town-pixel-art-assets
		C:\Users\Martin Piper\Downloads\town_rpg_pack
		town_rpg_pack\graphics\hero.png
		town_rpg_pack\graphics\npc.png
			Combined into: assets\sprites.png
	https://opengameart.org/content/colored-16x16-fantasy-tileset
		C:\Users\Martin Piper\Downloads\color_tileset_16x16_Jerom&amp;Eiyeron_CC-BY-SA-3.0_8.png
			Renamed: assets\map tiles.png
	
	* map/tiles created for use with Tiled map editor: assets\map.tmx and assets\RPG.tsx
		Menu->File->Export as image: assets\map.png


	https://opengameart.org/content/cloud-set
		assets\cloud tiles.png
	* map/tiles created for use with Tiled map editor: assets\clouds.tmx and assets\clouds.tsx
		Menu->File->Export as image: assets\clouds.png

	What should be transparent has been changed to be RGB 255,0,255 in all of the above

		
	* Conversion command line for assets
		assets\convert.bat



* Need a good fast way to output stacked sprite sheets for 6502 code
	Optional macro to increment something to count real sprites
		See macros: MEmitSpriteFrame MEmitSpriteFrame_Preserve MEmitSpriteFrame_RestoreExit



* AnimationEngine_Update can be optimised for display/goto/stop/delete by removing the by making MAnimationType* all the same size and removing kAnimationType_size*
	frame routine lo/hi
	stop = hi 0
	delete = hi 1
	otherwise goto = hi/lo address (then no need for any addition code, just store)


* Make SDK bat



* When the screen scrolls the other animations are moved
	Include an off screen check



* Add subtle cloud scaling/sheer/rotate



* When EmitSpriteFrame_count < (24-3) (3 being the most complex stacked sprite in spriteSheet.a)
	Then consider spawning a new sprite on one of the screen edges
	Can use the random number generator in Citadel
		Which would need adding to the SDK build



* Characters move around



* Some clouds horizontally flipped to give more variation



* Added mode7 top down test, yes it looks like Thunder Blade (main.a: Mode7LayersEnable): https://twitter.com/MartinPiper/status/1273987207863267328



* Improved the Mode7LayersEnable documentation. The perpsective effect now has its own scenario.




* When Mode7LayersEnable is enabled, figure out the mathematical relationship with Mode7LayerX/YPos, Mode7Layer0Scale, Mode7Layer1Scale and Mode7Layer2Scale and Mode7Regs0/1/2_x/ypos
	To get the vanishing point in the middle of the screen, the different scales seem to need some extra tweaks?
		e.g. "((Mode7LayerXPos*5)/4) * Mode7Layer2Scale" compared to "(Mode7LayerXPos/2) * Mode7Layer1Scale" compared to "Mode7LayerXPos * Mode7Layer0Scale"
		Trying to simplify, the calculation now uses consistent: Mode7LayerAccuracy = $100
			Far		$200:	(Mode7LayerXPos * Mode7LayerAccuracy * 5)/2				((Mode7LayerXPos*5)/4) * Mode7Layer2Scale
			Middle	$100:	Mode7LayerXPos * Mode7LayerAccuracy						Mode7LayerXPos * Mode7Layer0Scale
			Near	$80:	(Mode7LayerXPos * Mode7LayerAccuracy)/4					(Mode7LayerXPos/2) * Mode7Layer1Scale
		* Now changed to use:
			Mode7Layer1Scale = $80
			Mode7Layer1Multiplier = 1
			Mode7Layer1Divider = 2
			Mode7Layer0Scale = $100
			Mode7Layer0Multiplier = 1
			Mode7Layer0Divider = 1
			Mode7Layer2Scale = $200
			Mode7Layer2Multiplier = 5
			Mode7Layer2Divider = 4
		* After making Mode7Layer*Divider = 256 then the ratios for Mode7Layer*Multiplier become clearer
			Graphing it: https://docs.google.com/spreadsheets/d/1QBX7a31QZNNJsE-wVR33rMleGYEHlFAiU6XOTCAHLBU/edit?usp=sharing
			Obviously some kind of (1+x)/(1/x)
				https://docs.google.com/spreadsheets/d/1QBX7a31QZNNJsE-wVR33rMleGYEHlFAiU6XOTCAHLBU/edit#gid=0
		* Created: !macro TransformPositionTo24Bit .pos , .scale




* Create a table to allow zoom to be updated in realtime. The 24 bit offset position can be added to this base value for the different scales
	Fire + up/down to zoom in or out ("fly" up and down)




* For @BatBall
	https://www.spriters-resource.com/arcade/arkanoid/



* BatBall
	Done - Add shadows	
	Done - Add simple enemy movement
		Can use 16 bits, then just use the high byte for screen pos
	Done - Add first ball sprites
	Done - Add brick characters
	Done - Add example level bricks
		BlockSet
			BlockScreen will be updated to indcate if it is the left or right hand portion of the block
	Done - Add simple ball movement



* Tidy main3.a



* BatBall : Remove collided blocks
	BlockRemoveChecks removes the blocks with 0 chars
	Done - Need to remove with actual chars from the correct position



* Main3Anim (Arkanoid large ship animation)
	https://www.youtube.com/watch?v=QCfnri9hefQ
	Note the intro sequence shows the ship being damaged, but no green teleport effect
	Also note the game win sequence shows the ship being repaired and the green teleport effect
	These two sequences are not more than 16 frames each, even though there are 20 frames in total
	While converting all of the 20 frames to 8x8 chars gives:
		num tiles=277
		num palettes=9
	The 20 (or even 16) screens are too many, even for the banked char screen (at 2x2 = 4 banks) to display
	However when using the tile layer which has 4x4 = 16 screens:
		java -jar ..\..\..\ImageToBitplane\target\imagetobitplane-1.0-SNAPSHOT-jar-with-dependencies.jar --rgbshift 4 4 4 --newpalettes --forcergb 255 0 255 --paletteoffset 0 --palettesize 8 --imagequantize 8 --startxy 0 0 --image BatBall\ShipAnim.png --tilewh 16 16 --outputplanes ../tmp/BatBallAnim_plane --outputscrcol ../tmp/BatBallAnim_map.bin --outputpalettes ../tmp/BatBallAnim_palette.bin --numbitplanes 3 --convertwritepass
		num tiles=114
		num palettes=10
	The tile layer can easily store the animations for the intro and outro separately
	* Re-arrange the file so that the frames used in the intro/outro are converted into two "banks" of the large virtual tile screen
		4x4 and another 4x4 map underneath, giving 4x8 in total
		Use the assembler to separate out this data
	* This will output one set of tile planes, but provide two tile maps that can be animated using the scroll registers
		This means, the tile board will need to be constructed
	* Alternative: Since the ships are half screen height:
		Black opaque characters, with some optional stars, can be used to blank out the remaining portion
		Or if black opaque 32x32 sprites are used, it would be possible to use one tile map and blank out the required portion of the screen.
		Some sprites will still be available to use for the explosions, flying ship, lasers, player ship etc
	When using 16x16 tiles, the last few frames, the green beaming effect, does not seem to have quite enough colours for the back portion of the effect
		This could be fixed up with sprites if needed
		The 8x8 chars do not have this issue, due to the palette entries for the smaller area being able to cope
		* Perhaps the grey front part of the ship above the green effect is causing the colour palette to be overloaded?
			Moved the entire ship sheet downwards by 8 pixels, this reduced the used tiles from 114 to 106 !!
			This fixed the green effect, but causes problems with the right top small engine yellow highlight
			* So, for now, don't move the sheet



* 1.0.0.4
