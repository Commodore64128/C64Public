* Art resource notes, moved from BombJack\TODO.txt and enhanced
* https://www.romhacking.net/utilities/641/
	https://opengameart.org/content/rpg-town-pixel-art-assets
	C:\Users\Martin Piper\Downloads\town_rpg_pack\town_rpg_pack
	* Unfortunately the above uses more than 8 colours per 16x16 tile, look for others?
	https://opengameart.org/content/colored-16x16-fantasy-tileset
	Tests worked quite well: https://twitter.com/MartinPiper/status/1218539634847711232
	Other open game art assets:
		https://opengameart.org/content/gradius-clone-sprites
		https://opengameart.org/content/mediumtanks
		https://opengameart.org/users/chabull
		https://opengameart.org/content/16x16-overworld-tiles
		https://opengameart.org/content/forest-tiles

	Map editors: https://www.mapeditor.org/2020/04/14/tiled-1-3-4-released.html
		C:\Users\Martin Piper\Downloads\tiled-windows-64bit-snapshot\tiled.exe
		Supports flips, allows export as large image
	https://ogmoeditor.itch.io/editor
	
	A thought, why not use the RPG assets? Those demonstrated by TestData2.txt
		The conversion is already setup, they do not use that many palettes
		Could include all the other graphics, especially for the chars and score panel
			Char screen can overlay shops
		The mode7 layer could be used to draw clouds, or other effects like wipe transitions (zooming circle?), over the sprites and tiles
			https://opengameart.org/content/cloud-set

	Using the ImageToBitplane tool Run/Debug Configuration: Main all conv
		--rgbshift 4 4 4 --newpalettes --forcergb 0 0 0 --paletteoffset 0 --palettesize 8 --startxy 0 0 --image "src/test/resources/map_9 - Copy.png" --tilewh 16 16 --imagequantize 8 --nowritepass --resetforcergb --forcergb 255 0 255 --spritexy 0 0xd0 --startxy 0 0 --image src/test/resources/TestImage1.png --tilewh 16 16 --imagequantize 32 --usestacking --nowritepass --resetforcergb --forcergb 0 0 0 --startxy 0 0 --image "src/test/resources/map_9 - Copy.png" --tilewh 16 16 --imagequantize 8 --outputplanes target/background_plane --outputscrcol target/background_tiles.bin --nostacking --numbitplanes 3 --convertwritepass --nowrite --resetforcergb --forcergb 255 0 255 --spritexy 0 0xd0 --startxy 0 0 --image src/test/resources/TestImage1.png --tilewh 16 16 --imagequantize 32 --outputplanes target/sprite_plane --outputsprites target/spriteSheet.txt --outputpalettes target/PaletteData.bin --usestacking --numbitplanes 3 --convertwritepass
	Using GenerateData configuration: Debug2

	This demonstrates stacked multiplexed sprites over a 16x16 tiled background.

	Using the ImageToBitplane tool Run/Debug Configuration: Main old bridge RGB 0 0 0 palette opt rgbfactor 32
		--rgbshift 4 4 4 --rgbfactor 255 196 112 10 --rgbfactor 255 255 214 50 --rgbfactor 236 98 96 50 --newpalettes --forcergb 0 0 0 --paletteoffset 0 --palettesize 8 --startxy 0 0 --image "src/test/resources/oldbridge cropped.bmp" --tilewh 16 16 --imagequantize 8 --nowritepass --palettequantize 32 --image "src/test/resources/oldbridge cropped.bmp" --tilewh 16 16 --fitpalettes --outputplanes target/background_plane --outputscrcol target/background_tiles.bin --outputpalettes target/PaletteData.bin --nostacking --numbitplanes 3 --convertwritepass

	This demonstrates a detailed background picture with 32 palettes of 8 entries each.
	
	Using the ImageToBitplane tool Run/Debug Configuration: Main mode7 "map_9 - mode7 test.png"
		--rgbshift 4 4 4 --palettesize 256 --loadpalette target/PaletteData.bin --image "src/test/resources/map_9 - mode7 test.png" --tilewh 16 16 --fitpalettes --outputtilebytes target/mode7_tiles.bin --outputscrcol target/mode7_screen.bin --nostacking --convertwritepass
		And enabling the data load at: ; Write Mode7 registers
		This will demonstrate how the mode7 export with flipped tile detection works

		
		
* Need to setup graphics conversion pipeline
	https://opengameart.org/content/rpg-town-pixel-art-assets
		C:\Users\Martin Piper\Downloads\town_rpg_pack
		town_rpg_pack\graphics\hero.png
		town_rpg_pack\graphics\npc.png
			Combined into: assets\sprites.png
	https://opengameart.org/content/colored-16x16-fantasy-tileset
		C:\Users\Martin Piper\Downloads\color_tileset_16x16_Jerom&amp;Eiyeron_CC-BY-SA-3.0_8.png
			Renamed: assets\map tiles.png
	
	* map/tiles created for use with Tiled map editor: assets\map.tmx and assets\RPG.tsx
		Menu->File->Export as image: assets\map.png


	https://opengameart.org/content/cloud-set
		assets\cloud tiles.png
	* map/tiles created for use with Tiled map editor: assets\clouds.tmx and assets\clouds.tsx
		Menu->File->Export as image: assets\clouds.png

	What should be transparent has been changed to be RGB 255,0,255 in all of the above

		
	* Conversion command line for assets
		assets\convert.bat



* Need a good fast way to output stacked sprite sheets for 6502 code
	Optional macro to increment something to count real sprites
		See macros: MEmitSpriteFrame MEmitSpriteFrame_Preserve MEmitSpriteFrame_RestoreExit



* AnimationEngine_Update can be optimised for display/goto/stop/delete by removing the by making MAnimationType* all the same size and removing kAnimationType_size*
	frame routine lo/hi
	stop = hi 0
	delete = hi 1
	otherwise goto = hi/lo address (then no need for any addition code, just store)


* Make SDK bat



* When the screen scrolls the other animations are moved
	Include an off screen check



* Add subtle cloud scaling/sheer/rotate



* When EmitSpriteFrame_count < (24-3) (3 being the most complex stacked sprite in spriteSheet.a)
	Then consider spawning a new sprite on one of the screen edges
	Can use the random number generator in Citadel
		Which would need adding to the SDK build
