!zn
; These offset values put the layers in the "middle" of the screen in the emulation
; However there *may* be differences to the simulation (or real hardware) that will need these values to be verified
; This effect *may* be due to the differences when the horizontal and vertical internal registers are reset during the HSYNC and VSYNC
Mode7LayerXPos = -128
Mode7LayerYPos = -80

!macro TransformPositionTo24BitShifted .pos , .scale , .shift {
!set .val = (.scale / 256.0) + 1
!set .multiplier = (((1+.val)/(1-.val))  * 64) + 448
	!by (((.pos * .scale * .multiplier) DIV $100) >> .shift) & $ff
}

!macro TransformPositionTo24Bit .pos , .scale {
	+TransformPositionTo24BitShifted .pos , .scale , 0
	+TransformPositionTo24BitShifted .pos , .scale , 8
	+TransformPositionTo24BitShifted .pos , .scale , 16
}

LayerScaleLo
!for .i , 256 {
!set .scale = (.i + 1) * 4
	!by <.scale
}
LayerScaleHi
!for .i , 256 {
!set .scale = (.i + 1) * 4
	!by >.scale
}

LayerScaleOffsetX0
!for .i , 256 {
!set .scale = (.i + 1) * 4
	+TransformPositionTo24BitShifted Mode7LayerXPos , .scale , 0
}
LayerScaleOffsetX1
!for .i , 256 {
!set .scale = (.i + 1) * 4
	+TransformPositionTo24BitShifted Mode7LayerXPos , .scale , 8
}
LayerScaleOffsetX2
!for .i , 256 {
!set .scale = (.i + 1) * 4
	+TransformPositionTo24BitShifted Mode7LayerXPos , .scale , 16
}

LayerScaleOffsetY0
!for .i , 256 {
!set .scale = (.i + 1) * 4
	+TransformPositionTo24BitShifted Mode7LayerYPos , .scale , 0
}
LayerScaleOffsetY1
!for .i , 256 {
!set .scale = (.i + 1) * 4
	+TransformPositionTo24BitShifted Mode7LayerYPos , .scale , 8
}
LayerScaleOffsetY2
!for .i , 256 {
!set .scale = (.i + 1) * 4
	+TransformPositionTo24BitShifted Mode7LayerYPos , .scale , 16
}

; << Big
;Mode7Layer1Scale = $20
;Mode7Layer1Scale = $40
;Mode7Layer1Scale = $80
Mode7Layer1Scale = $c0

; << Middle: No scale
Mode7Layer0Scale = $100

Mode7Layer2Scale = $180
;Mode7Layer2Scale = $200
;Mode7Layer2Scale = $300
;Mode7Layer2Scale = $400
; << Small


.cnt1 !by $50
.cnt2 !by $80
.cnt3 !by $80
.velTab !by 8,16,32,64,60,55,50,45,40,35,30,25,20,16,8,4

.scaleTab !by 0,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1
	; Padding for .cnt2 scaling
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
Mode7_Update
!ifdef Mode7LayersEnable {
	rts
} else {
	inc .cnt1
	lda .cnt1
	lsr
	lsr
	lsr
	lsr
	tax
	clc
	lda .velTab,x
	adc Mode7Regs0_xpos
	sta Mode7Regs0_xpos
	bcc .l1
	inc Mode7Regs0_xpos+1
	bne .l1
	inc Mode7Regs0_xpos+2
.l1

	lda .cnt1
	lsr
	lsr
	and #15
	tax
	clc
	lda .velTab,x
	adc Mode7Regs0_ypos
	sta Mode7Regs0_ypos
	bcc .l2
	inc Mode7Regs0_ypos+1
	bne .l2
	inc Mode7Regs0_ypos+2
.l2

	; A differently timed value for scale
	lda .cnt1
	and #%11
	cmp #%11
	bne .o1

	inc .cnt2

	lda .cnt2
	lsr
	lsr
	lsr
	and #31
	tax
	lda .scaleTab,x
	sta Mode7Regs0_scale_dX

	lda .cnt2
	lsr
	lsr
	and #31
	tax
	lda .scaleTab,x
	sta Mode7Regs0_scale_dY

.o1

	; A differently timed value for sheer
	lda .cnt1
	and #%111
	cmp #%111
	bne .o2

	inc .cnt3

	lda .cnt3
	lsr
	lsr
	lsr
	and #31
	tax
	lda .scaleTab,x
	sta Mode7Regs0_scale_dXY

	lda .cnt3
	lsr
	lsr
	and #31
	tax
	lda .scaleTab,x
	sta Mode7Regs0_scale_dYX

.o2


	rts
}

!zn	
Mode7Regs0

Mode7Regs0_scale_dX
	+MLittleEndian24Bit Mode7Layer0Scale
Mode7Regs0_scale_dXY
	+MLittleEndian24Bit 0
Mode7Regs0_scale_dY
	+MLittleEndian24Bit Mode7Layer0Scale
Mode7Regs0_scale_dYX
	+MLittleEndian24Bit 0

Mode7Regs0_xpos
!ifdef Mode7LayersEnable {
	+TransformPositionTo24Bit Mode7LayerXPos , Mode7Layer0Scale
} else {
	+MLittleEndian24Bit 0
}
Mode7Regs0_ypos
!ifdef Mode7LayersEnable {
	+TransformPositionTo24Bit Mode7LayerYPos , Mode7Layer0Scale
} else {
	+MLittleEndian24Bit 0
}

	!by 0
	!by 0

Mode7Regs0_backgroundColour !by 0
Mode7Regs0_flags !by $1f

Mode7Regs0Size = * - Mode7Regs0



!ifdef Mode7LayersEnable {
Mode7Regs1

; Smaller scale value, bigger graphics
Mode7Regs1_scale_dX
	+MLittleEndian24Bit Mode7Layer1Scale
Mode7Regs1_scale_dXY
	+MLittleEndian24Bit 0
Mode7Regs1_scale_dY
	+MLittleEndian24Bit Mode7Layer1Scale
Mode7Regs1_scale_dYX
	+MLittleEndian24Bit 0

Mode7Regs1_xpos
	+TransformPositionTo24Bit Mode7LayerXPos , Mode7Layer1Scale
Mode7Regs1_ypos
	+TransformPositionTo24Bit Mode7LayerYPos , Mode7Layer1Scale

	!by 0
	!by 0

Mode7Regs1_backgroundColour !by 0
Mode7Regs1_flags !by $1f

Mode7Regs1Size = * - Mode7Regs1



Mode7Regs2

; Larger scale value, smaller graphics
Mode7Regs2_scale_dX
	+MLittleEndian24Bit Mode7Layer2Scale
Mode7Regs2_scale_dXY
	+MLittleEndian24Bit 0
Mode7Regs2_scale_dY
	+MLittleEndian24Bit Mode7Layer2Scale
Mode7Regs2_scale_dYX
	+MLittleEndian24Bit 0

Mode7Regs2_xpos
	+TransformPositionTo24Bit Mode7LayerXPos , Mode7Layer2Scale
Mode7Regs2_ypos
	+TransformPositionTo24Bit Mode7LayerYPos , Mode7Layer2Scale

	!by 0
	!by 0

Mode7Regs2_backgroundColour !by 0
Mode7Regs2_flags !by $1f

Mode7Regs2Size = * - Mode7Regs2
}


!zn
copyMode7Regs
!ifdef Mode7LayersEnable {
	lda #$01
	+MWordValueTo_XY $b000
	jsr Bus24Bit_SetAddressBus

	+MWordValueTo_AX Mode7Regs2
	ldy #Mode7Regs2Size
	jsr Bus24Bit_CopySmallData

	lda #$01
	+MWordValueTo_XY $a800
	jsr Bus24Bit_SetAddressBus

	+MWordValueTo_AX Mode7Regs1
	ldy #Mode7Regs1Size
	jsr Bus24Bit_CopySmallData
}

	lda #$01
	+MWordValueTo_XY $a000
	jsr Bus24Bit_SetAddressBus

	+MWordValueTo_AX Mode7Regs0
	ldy #Mode7Regs0Size
	jmp Bus24Bit_CopySmallData
