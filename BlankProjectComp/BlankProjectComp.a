;BlankProjectComp test code

!source "../stdlib/stdlib.a"
!to "BlankProjectComp.prg", cbm
!sl "BlankProjectComp.map"
!svl "BlankProjectComp.lbl"
!pdb "BlankProjectComp.pdb"
!cpu 6510
!ct pet

!macro Crunch .pos {
	+MACROWaitForRaster .pos
;	+MACRODelay_X 1
	and #7
;	ora #%111000
	ora #%11000
	sta VIC2ScreenControlV
}

*=$400
	sei
	lda #ProcessorPortAllRAMWithIO
	jsr InitialiseMachine
	lda #VIC2ScreenControlVDefault
	sta VIC2ScreenControlV

	ldx #0
.cl1
	txa
	sta COLOURRAM,x
	sta COLOURRAM+$100,x
	sta COLOURRAM+$200,x
	sta COLOURRAM+$300,x
	dex
	bne .cl1


!if 1 {
.l1
	lda #VIC2ScreenControlVDefault
	sta VIC2ScreenControlV
.l2
	lda #JoystickBits_Fire
	bit CIA1KeyboardColumnJoystickA
	bne .l2

	+MACROWaitForRaster VIC2SpriteYBorderTop+7
	inc VIC2BorderColour

	+Crunch VIC2SpriteYBorderTop+8
	+Crunch VIC2SpriteYBorderTop+9
	+Crunch VIC2SpriteYBorderTop+10
	+Crunch VIC2SpriteYBorderTop+11
	+Crunch VIC2SpriteYBorderTop+12
	+Crunch VIC2SpriteYBorderTop+13
	+Crunch VIC2SpriteYBorderTop+14
	+Crunch VIC2SpriteYBorderTop+15
	+Crunch VIC2SpriteYBorderTop+16
	+Crunch VIC2SpriteYBorderTop+17
	+Crunch VIC2SpriteYBorderTop+18
	+Crunch VIC2SpriteYBorderTop+19
	+Crunch VIC2SpriteYBorderTop+20
	+Crunch VIC2SpriteYBorderTop+21
	+Crunch VIC2SpriteYBorderTop+22
	+Crunch VIC2SpriteYBorderTop+23
	+Crunch VIC2SpriteYBorderTop+24
	+Crunch VIC2SpriteYBorderTop+25
	+Crunch VIC2SpriteYBorderTop+26
	+Crunch VIC2SpriteYBorderTop+27
	+Crunch VIC2SpriteYBorderTop+28
	+Crunch VIC2SpriteYBorderTop+29
	+Crunch VIC2SpriteYBorderTop+30


	dec VIC2BorderColour
	jmp .l1
}

!if 0 {
	; Keyboard scan tester
.l1
	+MACROWaitForRaster VIC2SpriteYBorderTop

	inc VIC2BorderColour

	; Read joystick
	lda #%01111111
	sta CIA1KeyboardColumnJoystickA

	lda CIA1KeyboardColumnJoystickA
	sta SCREENRAM+$300

	; Read keyboard
!if 0 {
	lda #%00000000
	sta CIA1KeyboardColumnJoystickA
	lda CIA1KeyboardRowsJoystickB
	sta SCREENRAM+$300+1

	lda CIA1KeyboardRowsJoystickB
	cmp #$ff
	beq .noKey
}

	ldx #%01111111
	ldy #0
	txa
.columnScan
	sta SCREENRAM+$300+8,y
	sta CIA1KeyboardColumnJoystickA
.again
	lda CIA1KeyboardRowsJoystickB
	cmp CIA1KeyboardRowsJoystickB
	bne .again
	sta SCREENRAM+$328+8,y
	iny
	txa
	sec
	ror
	tax
	bcs .columnScan

.noKey
	dec VIC2BorderColour
	jmp .l1
}


!if 0 {
	ldx #0
.l1
	lda #100
.l2
	cmp $d012
	bne .l2
	inx
	txa
	and #7
	sta $d016

	lda #150
.l3
	cmp $d012
	bne .l3
	lda #0
	sta $d016
	jmp .l1
}

!if 0 {
	lda #(VIC2ScreenControlHDefault | %10000)
	sta VIC2ScreenControlH

	lda #VIC2Colour_Grey
	sta VIC2ExtraBackgroundColour1
	lda #VIC2Colour_LightGrey
	sta VIC2ExtraBackgroundColour2

	; Visual update
	inc .stuff
	; Trigger any watches
	inc $c000

.l1 jmp .l1

.stuff !by 0

}

!if 0 {
	ldx #7
.f0
	lda # ($700 / 64)
	sta SCREENRAM+SPRITEFRAMESCROFF,x
	txa
	sta VIC2Sprite0Colour,x
	asl
	tay
	lda #128
	sta VIC2Sprite0Y,y
.sm0	lda #VIC2SpriteXBorderLeft
	sta VIC2Sprite0X,y
	lda .sm0+1
	clc
	adc #VIC2SpriteSizeX
	sta .sm0+1
	dex
	bpl .f0

	lda #%11111111
	sta VIC2SpriteEnable
	lda #0
	sta VIC2SpriteMulticolour
	sta VIC2SpriteDoubleWidth

.l1
	inc VIC2BorderColour
	dec VIC2BorderColour
	jmp .l1

*=$700
!fill 63, 255
}

!source "../stdlib/Initialise.a"
